Code-
#include <iostream>
#include <GL/glut.h>
using namespace std;

float move_1 = 0.0f;
void top_box()
{
    glColor3d(1,1,0);
    glMatrixMode(GL_MODELVIEW);
    glPushMatrix();
    glTranslatef(move_1, 0.0f, 0.0f);
    glBegin(GL_QUADS);
    glVertex2f(0.0f, 20.0f);
    glVertex2f(10.0f, 20.0f);
    glVertex2f(10.0f, 30.0f);
    glVertex2f(0.0f, 30.0);
    glEnd();
    glPopMatrix();
}
void update_1(int value)
{
    move_1 += 0.49999; //assume as moving speed
    if(move_1>50) //boundary for the positive x axis for last part of the box
    {
        move_1 = -61;//reappear the box
    }
    glutPostRedisplay();
    glutTimerFunc(20, update_1, 0);
}
float move_2 = 0.0f;
void bottom_box()
{
    glColor3d(1,1,0);
    glMatrixMode(GL_MODELVIEW);
    glPushMatrix();
    glTranslatef(move_2, 0.0f, 0.0f);
    glBegin(GL_QUADS);
    glVertex2f(0.0f, 0.0f);
    glVertex2f(-10.0f, 0.0f);
    glVertex2f(-10.0f, 10.0f);
    glVertex2f(0.0f, 10.0);
    glEnd();
    glPopMatrix();
}
void update_2(int value)
{
    move_2 -= 0.49999; //assume as moving speed
    if(move_2 < -50) //boundary for the negative x axis for last part of the box
    {
        move_2 = 61;//reappear the box
    }
    glutPostRedisplay();
    glutTimerFunc(20, update_2, 0);
}
float move_3 = 0.0f;
void left_box()
{
    glColor3d(1,0,0);
    glMatrixMode(GL_MODELVIEW);
    glPushMatrix();
    glTranslatef(0.0f, move_3, 0.0f);
    glBegin(GL_QUADS);
    glVertex2f(-40.0f, 0.0f);
    glVertex2f(-30.0f, 0.0f);
    glVertex2f(-30.0f, 10.0f);
    glVertex2f(-40.0f, 10.0);
    glEnd();
    glPopMatrix();
}
void update_3(int value)
{
    move_3 += 0.49999; //assume as moving speed
    if(move_3 > 50) //boundary for the negative x axis for last part of the box
    {
        move_3 = -60;//reappear the box
    }
    glutPostRedisplay();
    glutTimerFunc(20, update_3, 0);
}
float move_4 = 0.0f;
void right_box()
{
    glColor3d(1,0,0);
    glMatrixMode(GL_MODELVIEW);
    glPushMatrix();
    glTranslatef(0.0f, move_4, 0.0f);
    glBegin(GL_QUADS);
    glVertex2f(30.0f, 0.0f);
    glVertex2f(40.0f, 0.0f);
    glVertex2f(40.0f, -10.0f);
    glVertex2f(30.0f, -10.0);

    glEnd();
    glPopMatrix();
}
void update_4(int value)
{
    move_4 -= 0.49999; //assume as moving speed
    if(move_4 <-50) //boundary for the negative x axis for last part of the box
    {
        move_4 = 60;//reappear the box
    }
    glutPostRedisplay();
    glutTimerFunc(20, update_4, 0);
}
void identity_axis()
{
    glLoadIdentity(); //Reset the drawing perspective
    gluOrtho2D(-50,50,-50,50);
}
void display()
{
    glClear(GL_COLOR_BUFFER_BIT);
    top_box();
    bottom_box();
    left_box();
    right_box();
    glutSwapBuffers();
}
int main(int argc, char** argv)
{
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGB);
    glutInitWindowSize(800, 800);
    glutCreateWindow("Box Move Animation");
    glutDisplayFunc(display);
    identity_axis();
    glutTimerFunc(20, update_1, 0); //Add a timer
    glutTimerFunc(20, update_2, 0); //Add a timer
    glutTimerFunc(20, update_3, 0); //Add a timer
    glutTimerFunc(20, update_4, 0); //Add a timer
    glutMainLoop();
    return 0;
}