#include<cstdio>
#include <GL/gl.h>
#include <GL/glut.h>
#include<math.h>
#define PI          3.141516


GLfloat ship_position = 0.0f;
GLfloat ship_speed = 0.01f;
float boat_position = 0.0f;
float boat_speed = 0.001f;

float car1position=0;
float car1speed=0.005;

float car2position=0;
float car2speed=0.005;

float rainPosition=1;
float rainSpeed=0.02;

bool isRain=false;

float icePosition=1;
float iceSpeed=0.02;

bool isWinter=false;

int wheel_angle=0;

float busPosition=0.0;
float busSpeed=0.009;

float cloudPosition=0.0;
float cloudSpeed=0.003;

float sunPosition=0.0;
float sunSpeed=0.003;

float man1Position=0.3f;
float man1Speed=0.008;
;
float man2Position=-0.4f;
float man2Speed=0.012;

float man3Position=0.8f;
float man3Speed=0.01;

float man4Position=0.9f;
float man4Speed=0.015;


float ambulance_position=0;
float ambulance_speed=0.01;

float police_car_position=0;
float police_car_speed=0.01;

float planePosition=0;
float planeSpeed=0.025;


int covidPhase=1;
    ///pahse 1 is before covid
    ///phase 2 is during covid
    ///phase 3 is after covid


void update(int value)
{
    planePosition-=planeSpeed;
    if(planePosition<-1.0)
    {
        planePosition=1.0;
    }

    man1Position+=man1Speed;
    if(man1Position>1.0)
    {
        man1Position=-1.0;
    }
    man2Position+=man2Speed;
    if(man2Position>1.0)
    {
        man2Position=-1.0;
    }
    man3Position-=man3Speed;
    if(man1Position<-1.0)
    {
        man3Position=1.0;
    }
    man4Position-=man4Speed;
    if(man4Position<-1.0)
    {
        man4Position=1.0;
    }

    rainPosition-=rainSpeed;
    if(rainPosition<-1.0)
    {
        rainPosition=1;
    }
    icePosition-=iceSpeed;
    if(icePosition<-1.0)
    {
        icePosition=1;
    }
   if(car1position <=-1.0)
       car1position = 1.0f;
   car1position -= car1speed;

   if(car2position <=-1.0)
       car2position = 1.0f;
   car2position -= car2speed;

    if (ship_position>=1)
    {
        ship_position=-1;
    }
    ship_position+=ship_speed;


    boat_position -= boat_speed;
    if(boat_position <-1.0)
        boat_position = 1.0f;

    wheel_angle-=10;
    if(wheel_angle>=360)
    {
        wheel_angle=0;
    }
    busPosition+=busSpeed;
    if(busPosition>1.0)
    {
        busPosition=-1.0;
    }

    cloudPosition+=cloudSpeed;
    if(cloudPosition>1.0)
    {
        cloudPosition=-1.0;
    }

    sunPosition+=sunSpeed;
    if(sunPosition>1.0)
    {
        sunPosition=-1.0;
    }

    if (ambulance_position>=2)
    {
        ambulance_position=-1;
    }
    ambulance_position+=ambulance_speed;

    if (police_car_position>=2)
    {
        police_car_position=-1;
    }
    police_car_position+=police_car_speed;



glutPostRedisplay();
glutTimerFunc(100, update, 0);
}

void circle(float p1, float q1, float r1)
{
    int i;
    int tringle2=40;

    GLfloat tp2 =2.0f * PI  ;

    glBegin (GL_TRIANGLE_FAN);

    glVertex2f (p1,q1);
    for(i= 0;i<=tringle2; i++)
    {
        glVertex2f (
                    p1+(r1*cos(i*tp2/tringle2)),
                    q1+(r1*sin(i*tp2/tringle2))
                    );


    }
    glEnd ();
}
void cloud(float xc, float yc)
{
    glColor3f(1, 1, 1);
    circle(xc, yc, 0.15f);
    circle(xc-0.13, yc-0.02, 0.12f);
    circle(xc+0.14, yc+0.02, 0.10f);
}

void wheel()
{
    ///outer outer circle
        glColor3ub(150,150,150);
        circle(0,0,0.05);
        ///outer inner circle
        glColor3ub(0,0,0);
        circle(0,0,0.04);
        ///inner lines 1
        glColor3ub(250,250,250);
        glLineWidth(2);
        glBegin(GL_LINES);
        glVertex2f(-0.035,0);
        glVertex2f( 0.035,0);
        glEnd();
        ///inner lines 2
        glPushMatrix();
        glRotatef(45,0,0,1);
            glColor3ub(250,250,250);
            glLineWidth(2);
            glBegin(GL_LINES);
            glVertex2f(-0.035,0);
            glVertex2f( 0.035,0);
            glEnd();
        glPopMatrix();
        ///inner lines 3
        glPushMatrix();
        glRotatef(90,0,0,1);
            glColor3ub(250,250,250);
            glLineWidth(2);
            glBegin(GL_LINES);
            glVertex2f(-0.035,0);
            glVertex2f( 0.035,0);
            glEnd();
        glPopMatrix();
        ///inner lines 4
        glPushMatrix();
        glRotatef(135,0,0,1);
            glColor3ub(250,250,250);
            glLineWidth(2);
            glBegin(GL_LINES);
            glVertex2f(-0.035,0);
            glVertex2f( 0.035,0);
            glEnd();
        glPopMatrix();
        ///inner outer circle
        glColor3ub(150,150,150);
        circle(0,0,0.015);
        ///inner inner circle
        glColor3ub(0,0,0);
        circle(0,0,0.01);
}
void bus()
{
    glBegin(GL_POLYGON);
    glColor3f(0.5,0.5,0.5);
    glVertex2f(-0.25, 0.12);
    glVertex2f(-0.22, 0.2);
    glVertex2f(0.2, 0.2);
    glVertex2f(0.2, 0.0);
    glVertex2f(-0.25, 0.0);
    glEnd();
    ///left wheel
    glPushMatrix();
    glTranslatef(-0.18, 0,0);
    glRotatef(-wheel_angle,0,0,1);
    wheel();
    glPopMatrix();
    ///middle wheel
    glPushMatrix();
    glTranslatef(0.02, 0,0);
    glRotatef(-wheel_angle,0,0,1);
    wheel();
    glPopMatrix();

    ///right wheel
    glPushMatrix();
    glTranslatef(0.13, 0,0);
    glRotatef(-wheel_angle,0,0,1);
    wheel();
    glPopMatrix();

    ///windows
    ///front window
    glBegin(GL_POLYGON);
    glColor3f(0,0.5,0.5);
    glVertex2f(-0.24, 0.12);
    glVertex2f(-0.21, 0.19);
    glVertex2f(-0.17, 0.19);
    glVertex2f(-0.17, 0.12);
    glEnd();
    ///window 1
    glBegin(GL_QUADS);
    glColor3f(0,0.5,0.5);
    glVertex2f(-0.16, 0.12);
    glVertex2f(-0.16, 0.19);
    glVertex2f(-0.11, 0.19);
    glVertex2f(-0.11, 0.12);
    glEnd();
    ///gate
    glBegin(GL_POLYGON);
    glColor3f(0,0.5,0.5);
    glVertex2f(-0.05, 0.02);
    glVertex2f(-0.05, 0.15);
    glVertex2f(-0.10, 0.15);
    glVertex2f(-0.10, 0.02);
    glEnd();
    ///window 2
    glBegin(GL_QUADS);
    glColor3f(0,0.5,0.5);
    glVertex2f(-0.04, 0.12);
    glVertex2f(-0.04, 0.19);
    glVertex2f(0.01, 0.19);
    glVertex2f(0.01, 0.12);
    glEnd();
    ///window 3
    glBegin(GL_QUADS);
    glColor3f(0,0.5,0.5);
    glVertex2f(0.02, 0.12);
    glVertex2f(0.02, 0.19);
    glVertex2f(0.07, 0.19);
    glVertex2f(0.07, 0.12);
    glEnd();
    ///window 4
    glBegin(GL_QUADS);
    glColor3f(0,0.5,0.5);
    glVertex2f(0.08, 0.12);
    glVertex2f(0.08, 0.19);
    glVertex2f(0.13, 0.19);
    glVertex2f(0.13, 0.12);
    glEnd();
    ///window 5
    glBegin(GL_QUADS);
    glColor3f(0,0.5,0.5);
    glVertex2f(0.19, 0.12);
    glVertex2f(0.19, 0.19);
    glVertex2f(0.14, 0.19);
    glVertex2f(0.14, 0.12);
    glEnd();
}
void lamplight()
{
    glPushMatrix();
    glTranslatef(0.06,0.13,0);
    glRotatef(35,0,0,1);
    ///lamp post light circle
        glPushMatrix();
        ///rotating circle along x axis to make it ellipse
        glRotatef(60,1,0,0);
        ///outer circle
        glColor3f(1,1,1);
        circle(0,0,0.08);
        ///inner circle
        glColor3f(1,0,1);
        circle(0,0,0.07);
        glColor3f(1,1,1);
        glBegin(GL_QUADS);
            ///lamp post light 1
            glVertex2f(0.01,0.01);
            glVertex2f(0.04,0.01);
            glVertex2f(0.04,0.04);
            glVertex2f(0.01,0.04);

            ///lamp post light 2
            glVertex2f(-0.01,-0.01);
            glVertex2f(-0.04,-0.01);
            glVertex2f(-0.04,-0.04);
            glVertex2f(-0.01,-0.04);

            ///lamp post light 3
            glVertex2f(0.01,-0.01);
            glVertex2f(0.04,-0.01);
            glVertex2f(0.04,-0.04);
            glVertex2f(0.01,-0.04);

            ///lamp post light 4
            glVertex2f(-0.01,0.01);
            glVertex2f(-0.04,0.01);
            glVertex2f(-0.04,0.04);
            glVertex2f(-0.01,0.04);

        glEnd();
        glPopMatrix();
    glPopMatrix();
}
void lampStand()
{
    glColor3f(0.2,0.2,0.6);
    glBegin(GL_QUADS);
    glVertex2f(-0.01,-0.2);
    glVertex2f(-0.01,0.1);
    glVertex2f(0.01,0.1);
    glVertex2f(0.01,-0.2);
    glEnd();
}
void lampPostRight()
{
    lampStand();
    lamplight();
}
void lampPostLeft()
{
    lampStand();
    glPushMatrix();
    glRotatef(180,0,1,0);
    lamplight();
    glPopMatrix();
}
void lampPost()
{
    glPushMatrix();
    glTranslatef(0.1,0,0);
    lampPostRight();
    glPopMatrix();

    glPushMatrix();
    glTranslatef(-0.1,0,0);
    lampPostLeft();
    glPopMatrix();
}
void allLampPost()
{
    lampPost();
    glPushMatrix();
    glTranslatef(0.7,0,0);
    lampPost();
    glPopMatrix();

    glPushMatrix();
    glTranslatef(-0.7,0,0);
    lampPost();
    glPopMatrix();
}
void human(float red, float green, float blue, float x, float y)
{
    glPushMatrix();
    glTranslatef(x,y,0);
    glRotatef(65, 0,1,0);
    //human1
    //shirt
	glBegin(GL_QUADS);              // Each set of 4 vertices form a quad
	glColor3f(red, green, blue); // Red

	glVertex2f(0.0f, -0.13f);    // x, y
	glVertex2f(0.07f, -0.13f);    // x, y

	glVertex2f(0.07f, -0.06f);    // x, y
	glVertex2f(0.0f, -0.06f);    // x, y
	glEnd();

	//left hand
	glBegin(GL_QUADS);
    glColor3f(0.8, 0.8, 0.7f);

    glVertex2f(0.0f,-0.145f);
    glVertex2f(-0.015f,-0.145f);
    glVertex2f(-0.012f,-0.06f);
    glVertex2f(0.0f,-0.06f);
    glEnd();

	//left hand sleave
	glBegin(GL_QUADS);
    glColor3f(red, green, blue);

    glVertex2f(0.0f,-0.1f);
    glVertex2f(-0.015f,-0.1f);
    glVertex2f(-0.012f,-0.06f);
    glVertex2f(0.0f,-0.06f);
    glEnd();

    ///right hand
	glBegin(GL_QUADS);
    glColor3f(0.8, 0.8, 0.7f);

    glVertex2f(0.07f,-0.145f);
    glVertex2f(0.085f,-0.145f);
    glVertex2f(0.082f,-0.06f);
    glVertex2f(0.07f,-0.06f);
    glEnd();



	///right hand sleave
	glBegin(GL_QUADS);
    glColor3f(red, green, blue);

    glVertex2f(0.07f,-0.1f);
    glVertex2f(0.085f,-0.1f);
    glVertex2f(0.082f,-0.06f);
    glVertex2f(0.07f,-0.06f);
    glEnd();

	//leg
	glBegin(GL_QUADS);              // Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.0f, 0.6f); // Red

	glVertex2f(0.0f, -0.2f);    // x, y
	glVertex2f(0.02f, -0.2f);    // x, y

	glVertex2f(0.07f, -0.13f);    // x, y
	glVertex2f(0.0f, -0.13f);    // x, y
	glEnd();
	glBegin(GL_QUADS);              // Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.0f, 0.6f); // Red

	glVertex2f(0.05f, -0.2f);    // x, y
	glVertex2f(0.07f, -0.2f);    // x, y

	glVertex2f(0.07f, -0.13f);    // x, y
	glVertex2f(0.03f, -0.16f);    // x, y
	glEnd();
	///shoe
	glBegin(GL_QUADS);              // Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.0f, 0.0f); // Red

	glVertex2f(0.0f, -0.22f);    // x, y
	glVertex2f(0.02f, -0.22f);    // x, y

	glVertex2f(0.02f, -0.2f);    // x, y
	glVertex2f(0.0f, -0.2f);    // x, y
	glEnd();
	glBegin(GL_QUADS);              // Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.0f, 0.0f); // Red

	glVertex2f(0.05f, -0.22f);    // x, y
	glVertex2f(0.07f, -0.22f);    // x, y

	glVertex2f(0.07f, -0.2f);    // x, y
	glVertex2f(0.05f, -0.2f);    // x, y
	glEnd();

	///neck
	glBegin(GL_QUADS);              // Each set of 4 vertices form a quad
	glColor3f(1.0f, 1.0f, 1.0f); // Red

	glVertex2f(0.025f, -0.06f);    // x, y
	glVertex2f(0.045f, -0.06f);    // x, y

	glVertex2f(0.045f, -0.04f);    // x, y
	glVertex2f(0.025f, -0.04f);    // x, y
	glEnd();

	///face
	glBegin(GL_QUADS);              // Each set of 4 vertices form a quad
	glColor3f(1.0f, 1.0f, 1.0f); // Red

	glVertex2f(0.01f, -0.04f);    // x, y
	glVertex2f(0.06f, -0.04f);    // x, y

	glVertex2f(0.06f, 0.0f);    // x, y
	glVertex2f(0.01f, 0.0f);    // x, y
	glEnd();



	///mask
	if(covidPhase==3)
    {
        glColor3f(0,0,0);
        glBegin(GL_POLYGON);
            glVertex2f(0.01,-0.04);
            glVertex2f(0.035, -0.05);
            glVertex2f(0.06, -0.04);
            glVertex2f(0.06, -0.017);
            glVertex2f(0.035, -0.007);
            glVertex2f(0.01, -0.017);
        glEnd();
    }


	///hat
	glBegin(GL_QUADS);              // Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.0f, 0.0f); // Red

	glVertex2f(0.01f, 0.0f);    // x, y
	glVertex2f(0.06f, 0.0f);    // x, y

	glVertex2f(0.05f, 0.03f);    // x, y
	glVertex2f(0.02f, 0.03f);    // x, y
	glEnd();
	glPopMatrix();






}
void ship()
{
    /// ship

	glPushMatrix();
    glTranslatef(ship_position,-0.15,0);

	glBegin(GL_QUADS);              /// Each set of 4 vertices form a quad
	glColor3f(0.3f, 0.2f, 0.3f); /// blue

	glVertex2f(-0.2f, 0.31f);    /// x, y
	glVertex2f(-0.88f, 0.31f);    /// x, y

	glVertex2f(-0.88f, 0.1f);    /// x, y
	glVertex2f(-0.3f, 0.1f);    /// x, y
	glEnd();


	glBegin(GL_QUADS);/// ship up              /// Each set of 4 vertices form a quad
	glColor3f(0.8f, 0.5f, 0.0f); /// blue

	glVertex2f(-0.37f, 0.42f);    /// x, y
	glVertex2f(-0.85f, 0.42f);    /// x, y

	glVertex2f(-0.85f, 0.31f);    /// x, y
	glVertex2f(-0.3f, 0.31f);    /// x, y
	glEnd();

	glBegin(GL_QUADS);/// ship up 3             /// Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.3f, 0.5f); /// blue

	glVertex2f(-0.45f, 0.53f);    /// x, y
	glVertex2f(-0.8f, 0.53f);    /// x, y

	glVertex2f(-0.8f, 0.42f);    /// x, y
	glVertex2f(-0.39f, 0.42f);    /// x, y
	glEnd();

	glBegin(GL_QUADS);/// ship up 4            /// Each set of 4 vertices form a quad
	glColor3f(0.8f, 0.3f, 0.0f); /// blue

	glVertex2f(-0.55f, 0.62f);    /// x, y
	glVertex2f(-0.75f, 0.62f);    /// x, y

	glVertex2f(-0.75f, 0.53f);    /// x, y
	glVertex2f(-0.5f, 0.53f);    /// x, y
	glEnd();



	glBegin(GL_QUADS);  ///w1            /// Each set of 4 vertices form a quad
	glColor3f(1.0f, 1.0f, 1.0f); /// blue

	glVertex2f(-0.74f, 0.4f);    /// x, y
	glVertex2f(-0.8f, 0.4f);    /// x, y

	glVertex2f(-0.8f, 0.33f);    /// x, y
	glVertex2f(-0.74f, 0.33f);    /// x, y
	glEnd();

	glBegin(GL_QUADS);  ///w2            /// Each set of 4 vertices form a quad
	glColor3f(1.0f, 1.0f, 1.0f); /// blue

	glVertex2f(-0.62f, 0.4f);    /// x, y
	glVertex2f(-0.68f, 0.4f);    /// x, y

	glVertex2f(-0.68f, 0.33f);    /// x, y
	glVertex2f(-0.62f, 0.33f);    /// x, y
	glEnd();

	glBegin(GL_QUADS);  ///w3            /// Each set of 4 vertices form a quad
	glColor3f(1.0f, 1.0f, 1.0f); /// blue

	glVertex2f(-0.5f, 0.4f);    /// x, y
	glVertex2f(-0.56f, 0.4f);    /// x, y

	glVertex2f(-0.56f, 0.33f);    /// x, y
	glVertex2f(-0.5f, 0.33f);    /// x, y
	glEnd();

	glBegin(GL_QUADS);  ///w4            /// Each set of 4 vertices form a quad
	glColor3f(1.0f, 1.0f, 1.0f); /// blue

	glVertex2f(-0.39f, 0.4f);    /// x, y
	glVertex2f(-0.45f, 0.4f);    /// x, y

	glVertex2f(-0.45f, 0.33f);    /// x, y
	glVertex2f(-0.39f, 0.33f);    /// x, y
	glEnd();


	glBegin(GL_QUADS);  ///bw1            /// Each set of 4 vertices form a quad
	glColor3f(0.5f, 0.0f, 0.0f); /// blue

	glVertex2f(-0.68f, 0.51f);    /// x, y
	glVertex2f(-0.75f, 0.51f);    /// x, y

	glVertex2f(-0.75f, 0.43f);    /// x, y
	glVertex2f(-0.68f, 0.43f);    /// x, y
	glEnd();

	glBegin(GL_QUADS);  ///bw2           /// Each set of 4 vertices form a quad
	glColor3f(0.5f, 0.0f, 0.0f); /// blue

	glVertex2f(-0.63f, 0.51f);    /// x, y
	glVertex2f(-0.56f, 0.51f);    /// x, y

	glVertex2f(-0.56f, 0.43f);    /// x, y
	glVertex2f(-0.63f, 0.43f);    /// x, y
	glEnd();


	glBegin(GL_QUADS);  ///bw3           /// Each set of 4 vertices form a quad
	glColor3f(0.5f, 0.0f, 0.0f); /// blue

	glVertex2f(-0.51f, 0.51f);    /// x, y
	glVertex2f(-0.45f, 0.51f);    /// x, y

	glVertex2f(-0.45f, 0.43f);    /// x, y
	glVertex2f(-0.51f, 0.43f);    /// x, y
	glEnd();


    glBegin(GL_QUADS);  ///lbw1            /// Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.0f, 0.0f); /// blue

	glVertex2f(-0.6f, 0.61f);    /// x, y
	glVertex2f(-0.68f, 0.61f);    /// x, y

	glVertex2f(-0.68f, 0.54f);    /// x, y
	glVertex2f(-0.6f, 0.54f);    /// x, y
	glEnd();


    glPopMatrix();
	///ship end
}
void boat()
{
    ///boat

	glPushMatrix();
    glTranslatef(boat_position,0,0);

	glBegin(GL_QUADS);  ///boat           /// Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.0f, 0.0f); /// blue

	glVertex2f(0.2f, 0.3f);    /// x, y
	glVertex2f(0.6f, 0.3f);    /// x, y

	glVertex2f(0.5f, 0.17f);    /// x, y
	glVertex2f(0.3f, 0.17f);    /// x, y
	glEnd();

	glBegin(GL_QUADS);  ///boat           /// Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.0f, 1.0f); /// blue

	glVertex2f(0.25f, 0.35f);    /// x, y
	glVertex2f(0.45, 0.35f);    /// x, y

	glVertex2f(0.45f, 0.3f);    /// x, y
	glVertex2f(0.25f, 0.3f);    /// x, y
	glEnd();

	glBegin(GL_LINES);///boat
   glColor3f(1.0f, 0.0f, 0.0f);
   glVertex2f(0.33f,0.35f);
   glVertex2f(0.33f, 0.3f);
   glEnd();

   glBegin(GL_LINES);///boat
   glColor3f(1.0f, 0.0f, 0.0f);
   glVertex2f(0.35f,0.35f);
   glVertex2f(0.35f, 0.3f);
   glEnd();

   glBegin(GL_LINES);///boat
   glColor3f(1.0f, 0.0f, 0.0f);
   glVertex2f(0.4f,0.35f);
   glVertex2f(0.4f, 0.3f);
   glEnd();

	glBegin(GL_TRIANGLES);  ///boat           /// Each set of 4 vertices form a quad
	glColor3f(1.0f, 0.0f, 0.0f); /// blue

	glVertex2f(0.33f, 0.58f);    /// x, y
	glVertex2f(0.21f, 0.33f);    /// x, y
	glVertex2f(0.33f, 0.35f);

	glBegin(GL_TRIANGLES);  ///boat           /// Each set of 4 vertices form a quad
	glColor3f(1.0f, 0.0f, 0.0f); /// blue

	glVertex2f(0.35f, 0.58f);    /// x, y
	glVertex2f(0.45f, 0.33f);    /// x, y
	glVertex2f(0.35f, 0.35f);

	glBegin(GL_TRIANGLES);  ///boat           /// Each set of 4 vertices form a quad
	glColor3f(1.0f, 0.0f, 0.0f); /// blue

	glVertex2f(0.4f, 0.55f);    /// x, y
	glVertex2f(0.5f, 0.33f);    /// x, y
	glVertex2f(0.4f, 0.35f);

	glEnd();
    glPopMatrix();
}
void plane()
{


    glPushMatrix();
    glScalef(0.5, 0.5,1);;
    glTranslatef(0, 0.8, 0);

    glBegin(GL_QUADS);              /// Each set of 4 vertices form a quad
	glColor3f(0.5f, 0.5f, 0.5f); /// Red

	glVertex2f(-0.5f, 0.9f);    /// x, y
	glVertex2f(-0.18f, 0.9f);    /// x, y
	glVertex2f(-0.05f, 0.75f);    /// x, y
	glVertex2f(-0.58f, 0.75f);
	glEnd();

	glBegin(GL_QUADS);              /// Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.0f, 0.0f); /// Red

	glVertex2f(-0.47f, 0.85f);    /// x, y
	glVertex2f(-0.4f, 0.85f);    /// x, y
	glVertex2f(-0.4f, 0.8f);    /// x, y
	glVertex2f(-0.47f, 0.8f);
	glEnd();

	glBegin(GL_TRIANGLES);           /// Each set of 4 vertices form a quad
	glColor3f(0.8f, 0.0f, 0.0f); /// blue

	glVertex2f(-0.2f, 0.87f);    /// x, y
	glVertex2f(-0.32f, 0.9f);    /// x, y
	glVertex2f(-0.15f, 0.98f);

	glEnd();

	glBegin(GL_TRIANGLES);             /// Each set of 4 vertices form a quad
	glColor3f(0.8f, 0.0f, 0.0f); /// blue

	glVertex2f(-0.35f, 0.76f);    /// x, y
	glVertex2f(-0.25f, 0.78f);    /// x, y
	glVertex2f(-0.18f, 0.6f);

	glEnd();

		glBegin(GL_TRIANGLES);             /// Each set of 4 vertices form a quad
	glColor3f(0.8f, 0.0f, 0.0f); /// blue

	glVertex2f(-0.1f, 0.75f);    /// x, y
	glVertex2f(-0.15f, 0.82f);    /// x, y
	glVertex2f(-0.02f, 0.8f);

	glEnd();
	glPopMatrix();
}
void Tree()
{
     //tree

	glBegin(GL_QUADS);  /// tree 1            // Each set of 4 vertices form a quad
	glColor3f(0.6f, 0.3f, 0.0f); // Red

	glVertex2f(-0.95f, 0.36f);    // x, y
	glVertex2f(-1.0f, 0.36f);    // x, y

	glVertex2f(-1.0f, -0.25f);    // x, y
	glVertex2f(-0.95f, -0.25f);
	glEnd();

	glBegin(GL_TRIANGLES);           // Each set of 4 vertices form a quad
	glColor3f(0.0f, 1.0f, 0.0f); // blue

	glVertex2f(-1.0f, 0.7f);    // x, y
	glVertex2f(-1.0f, 0.36f);    // x, y
	glVertex2f(-0.8f, 0.36f);

	glEnd();

	glBegin(GL_TRIANGLES);             // Each set of 4 vertices form a quad
	glColor3f(0.0f, 1.0f, 0.0f); // blue

	glVertex2f(-1.0f, 0.85f);    // x, y
	glVertex2f(-1.0f, 0.6f);    // x, y
	glVertex2f(-0.85f, 0.6f);

	glEnd();


	glBegin(GL_QUADS);  /// tree 2           // Each set of 4 vertices form a quad
	glColor3f(0.6f, 0.3f, 0.0f); // Red

	glVertex2f(0.95f, 0.36f);    // x, y
	glVertex2f(1.0f, 0.36f);    // x, y

	glVertex2f(1.0f, -0.25f);    // x, y
	glVertex2f(0.95f, -0.25f);
	glEnd();

	glBegin(GL_TRIANGLES);           // Each set of 4 vertices form a quad
	glColor3f(0.0f, 1.0f, 0.0f); // blue

	glVertex2f(1.0f, 0.7f);    // x, y
	glVertex2f(1.0f, 0.36f);    // x, y
	glVertex2f(0.8f, 0.36f);

	glEnd();

	glBegin(GL_TRIANGLES);             // Each set of 4 vertices form a quad
	glColor3f(0.0f, 1.0f, 0.0f); // blue

	glVertex2f(1.0f, 0.85f);    // x, y
	glVertex2f(1.0f, 0.6f);    // x, y
	glVertex2f(0.85f, 0.6f);

	glEnd();



	if(isWinter)
    {
        glPointSize(10.0);
        glColor3f(1,1,1);
        circle(-0.98,0.75,0.02);
        circle(-0.96,0.7,0.02);
        circle(-0.94,0.65,0.02);
        circle(-0.92,0.55,0.02);
        glEnd();
        glPointSize(10.0);
        glColor3f(1,1,1);
        circle(0.98,0.75,0.02);
        circle(0.96,0.7,0.02);
        circle(0.94,0.65,0.02);
        circle(0.92,0.55,0.02);
        glEnd();
    }
}

void river()
{



	///river
	glBegin(GL_QUADS);              /// Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.6f, 0.8f); /// blue

	glVertex2f(-1.0f, -0.1f);    /// x, y
	glVertex2f(1.0f, -0.1f);    /// x, y

	glVertex2f(1.0f, 0.4f);    /// x, y
	glVertex2f(-1.0f, 0.4f);    /// x, y
	glEnd();


	///bank  river
	glLineWidth(3.0);
	glBegin(GL_LINES);
	glColor3f(0,0,0);
	glVertex2f(-1.0,0.4);
	glVertex2f(1.0, 0.4);
	glEnd();


    boat();
    if(covidPhase!=2)
    {
        ship();
    }
    Tree();


}

void SKY_Background()
{
    glClearColor(1.0f, 1.0f, 1.0f, 1.0f); //// Set background color to black and opaque
	glClear(GL_COLOR_BUFFER_BIT);         //// Clear the color buffer (background)

	//// Draw a Red 1x1 Square centered at origin
	////sky
    glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.0f, 1.0f, 1.0f); //// sky-blue

	glVertex2f(-1.0f, 0.4f);    //// x, y
	glVertex2f(1.0f, 0.4f);    //// x, y

	glVertex2f(1.0f, 1.0f);    //// x, y
	glVertex2f(-1.0f, 1.0f);    //// x, y
	glEnd();

	///sun
	glColor3f(1,0,0);
    glPushMatrix();
        glTranslatef(0,sunPosition,0);
	circle(0.8, 0.9, 0.05);
    glPopMatrix();


////tree 1

	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.3f, 0.3f, 0.0f); //// sky-blue

	glVertex2f(-0.883f, 0.4f);    //// x, y
	glVertex2f(-0.87f, 0.4f);    //// x, y

	glVertex2f(-0.87f, 0.6f);    //// x, y
	glVertex2f(-0.883, 0.6f);    //// x, y
	glEnd();

	glBegin(GL_TRIANGLES);
    glColor3f(0.0f, 0.6f, 0.0f);

    glVertex2f(-0.9f,0.47f);
    glVertex2f(-0.84f,0.47f);
    glVertex2f(-0.89f,0.62f);

    glEnd();

    glBegin(GL_TRIANGLES);
    glColor3f(0.0f, 0.6f, 0.0f);

    glVertex2f(-0.9f,0.5f);
    glVertex2f(-0.84f,0.5f);
    glVertex2f(-0.87f,0.7f);

    glEnd();
////tree 2


	glBegin(GL_TRIANGLES);
    glColor3f(0.0f, 0.6f, 0.0f);

    glVertex2f(-0.77f,0.4f);
    glVertex2f(-0.7f,0.4f);
    glVertex2f(-0.74f,0.7f);

    glEnd();
    glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.5f, 0.0f); //// sky-blue

	glVertex2f(-0.72f, 0.4f);    //// x, y
	glVertex2f(-0.4f, 0.4f);    //// x, y

	glVertex2f(-0.4f, 0.42f);    //// x, y
	glVertex2f(-0.72, 0.42f);    //// x, y
	glEnd();
////tree 3
	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.3f, 0.3f, 0.0f); //// sky-blue

	glVertex2f(-0.533f, 0.5f);    //// x, y
	glVertex2f(-0.52f, 0.5f);    //// x, y

	glVertex2f(-0.52f, 0.6f);    //// x, y
	glVertex2f(-0.533, 0.6f);    //// x, y
	glEnd();
	glBegin(GL_TRIANGLES);
    glColor3f(0.0f, 0.6f, 0.0f);

    glVertex2f(-0.59f,0.54f);
    glVertex2f(-0.46f,0.54f);
    glVertex2f(-0.53f,0.64f);
    glEnd();

	glBegin(GL_TRIANGLES);
    glColor3f(0.0f, 0.6f, 0.0f);

    glVertex2f(-0.59f,0.57f);
    glVertex2f(-0.46f,0.57f);
    glVertex2f(-0.53f,0.68f);

    glEnd();

    glBegin(GL_TRIANGLES);
    glColor3f(0.0f, 0.6f, 0.0f);

    glVertex2f(-0.34f,0.4f);
    glVertex2f(-0.29f,0.4f);
    glVertex2f(-0.32f,0.6f);

    glEnd();

    glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.6f, 0.0f); //// sky-blue

	glVertex2f(-0.28f, 0.4f);    //// x, y
	glVertex2f(0.0f, 0.4f);    //// x, y

	glVertex2f(0.0f, 0.42f);    //// x, y
	glVertex2f(-0.28, 0.42f);    //// x, y
	glEnd();
////tree 4
	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.3f, 0.3f, 0.0f); //// sky-blue

	glVertex2f(-0.057f, 0.4f);    //// x, y
	glVertex2f(-0.044f, 0.4f);    //// x, y

	glVertex2f(-0.044f, 0.53f);    //// x, y
	glVertex2f(-0.057f, 0.53f);    //// x, y
	glEnd();
	glBegin(GL_TRIANGLES);
    glColor3f(0.0f, 0.6f, 0.0f);

    glVertex2f(-0.07f,0.48f);
    glVertex2f(-0.03f,0.48f);
    glVertex2f(-0.05f,0.65f);

    glEnd();
////tree 5
    glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.3f, 0.3f, 0.0f); //// sky-blue

	glVertex2f(0.048f, 0.4f);    //// x, y
	glVertex2f(0.064f, 0.4f);    //// x, y

	glVertex2f(0.064f, 0.53f);    //// x, y
	glVertex2f(0.048f, 0.53f);    //// x, y
	glEnd();
	glBegin(GL_TRIANGLES);
    glColor3f(0.0f, 0.6f, 0.0f);

    glVertex2f(0.03f,0.47f);
    glVertex2f(0.081f,0.47f);
    glVertex2f(0.06f,0.68f);
    glEnd();
    glBegin(GL_TRIANGLES);
    glColor3f(0.0f, 0.6f, 0.0f);

    glVertex2f(0.03f,0.48f);
    glVertex2f(0.082f,0.48f);
    glVertex2f(0.07f,0.64f);
    glEnd();
////tree 6
	glBegin(GL_TRIANGLES);
    glColor3f(0.0f, 0.6f, 0.0f);

    glVertex2f(0.17f,0.4f);
    glVertex2f(0.21f,0.4f);
    glVertex2f(0.19f,0.6f);
    glEnd();
glBegin(GL_TRIANGLES);
    glColor3f(0.0f, 0.6f, 0.0f);

    glVertex2f(0.31f,0.4f);
    glVertex2f(0.34f,0.4f);
    glVertex2f(0.33f,0.6f);
    glEnd();
   glBegin(GL_TRIANGLES);
    glColor3f(0.0f, 0.6f, 0.0f);

    glVertex2f(0.31f,0.4f);
    glVertex2f(0.34f,0.4f);
    glVertex2f(0.33f,0.6f);
    glEnd();

////tree 7
    glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.3f, 0.3f, 0.0f); //// sky-blue

	glVertex2f(0.444f, 0.4f);    //// x, y
	glVertex2f(0.456f, 0.4f);    //// x, y

	glVertex2f(0.456f, 0.5f);    //// x, y
	glVertex2f(0.444f, 0.5f);    //// x, y
	glEnd();
	glBegin(GL_TRIANGLES);
    glColor3f(0.0f, 0.6f, 0.0f);

    glVertex2f(0.43f,0.44f);
    glVertex2f(0.47f,0.44f);
    glVertex2f(0.45f,0.6f);
    glEnd();

    glBegin(GL_TRIANGLES);
    glColor3f(0.0f, 0.6f, 0.0f);

    glVertex2f(0.56f,0.4f);
    glVertex2f(0.59f,0.4f);
    glVertex2f(0.575f,0.55f);
    glEnd();

    glBegin(GL_TRIANGLES);
    glColor3f(0.0f, 0.6f, 0.0f);

    glVertex2f(0.69f,0.4f);
    glVertex2f(0.73f,0.4f);
    glVertex2f(0.71f,0.6f);
    glEnd();

////tree 8
    glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.3f, 0.3f, 0.0f); //// sky-blue

	glVertex2f(0.855f, 0.4f);    //// x, y
	glVertex2f(0.875f, 0.4f);    //// x, y

	glVertex2f(0.875f, 0.5f);    //// x, y
	glVertex2f(0.855f, 0.5f);    //// x, y
	glEnd();
	glBegin(GL_TRIANGLES);
    glColor3f(0.0f, 0.6f, 0.0f);

    glVertex2f(0.82f,0.44f);
    glVertex2f(0.91f,0.44f);
    glVertex2f(0.86f,0.67f);
    glEnd();
    glBegin(GL_TRIANGLES);
    glColor3f(0.0f, 0.6f, 0.0f);

    glVertex2f(0.83f,0.44f);
    glVertex2f(0.9f,0.44f);
    glVertex2f(0.88f,0.65f);
    glEnd();

    if(covidPhase==3)
    {
        ///flowers
        glPointSize(6.0);
        glBegin(GL_POINTS);
        glColor3f(1.0f, 1.0f, 1.0f); // yellow
        glVertex2f(-0.875f, 0.485f);    // x, y
        //t1
        glVertex2f(-0.86f, 0.489f);
        glVertex2f(-0.89f,0.5f);
        glVertex2f(-0.88f,0.53f);
        glVertex2f(-0.862f, 0.57f);
        glVertex2f(-0.888f,0.58f);
        glVertex2f(-0.87f,0.615f);
        //t2
        glVertex2f(-0.74f,0.65f);
        glVertex2f(-0.72f,0.42f);
        glVertex2f(-0.73f,0.47f);
        glVertex2f(-0.725f,0.52f);
        //t3
        glVertex2f(-0.57f,0.55f);
        glVertex2f(-0.54f,0.56f);
        glVertex2f(-0.51f,0.57f);
        glVertex2f(-0.48f,0.55f);
        glVertex2f(-0.56f,0.59f);
        glVertex2f(-0.535f,0.6f);
        glVertex2f(-0.49f,0.61f);
        glVertex2f(-0.53f,0.64f);
        //t4
        glVertex2f(-0.33f,0.42f);
        glVertex2f(-0.31f,0.42f);
        glVertex2f(-0.32f,0.46f);
        glVertex2f(-0.31f,0.49f);
        glVertex2f(-0.32f,0.53f);
        //t5
        glVertex2f(-0.06f,0.49f);
        glVertex2f(-0.04f,0.5f);
        glVertex2f(-0.055f,0.535f);
        glVertex2f(-0.045f,0.57f);
        //t6
        glVertex2f(0.05f,0.48f);
        glVertex2f(0.07f,0.49f);
        glVertex2f(0.055f,0.52f);
        glVertex2f(0.07f,0.55f);
        glVertex2f(0.045f,0.57f);
        glVertex2f(0.06f,0.6f);
        //t7
        glVertex2f(0.18f,0.42f);
        glVertex2f(0.197f,0.43f);
        glVertex2f(0.19f,0.47f);
        glVertex2f(0.189f,0.53f);
        //t9
        glVertex2f(0.44f,0.46f);
        glVertex2f(0.456f,0.47f);
        glVertex2f(0.445f,0.5f);
        glVertex2f(0.45f,0.54f);
        //t11
        glVertex2f(0.7f,0.42f);
        glVertex2f(0.72f,0.43f);
        glVertex2f(0.71f,0.47f);
        glVertex2f(0.715f,0.52f);
        //t12
        glVertex2f(0.84f,0.46f);
        glVertex2f(0.86f,0.48f);
        glVertex2f(0.88f,0.47f);
        glVertex2f(0.845f,0.51f);
        glVertex2f(0.87f,0.53f);
        glVertex2f(0.89f,0.55f);
        glVertex2f(0.855f,0.58f);
        glVertex2f(0.875f,0.6f);




        glEnd();
    }



	////Buildings
	////1
	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.6f, 0.6f); //// sky-blue

	glVertex2f(-1.0f, 0.4f);    //// x, y
	glVertex2f(-0.91f, 0.4f);    //// x, y

	glVertex2f(-0.91f, 0.6f);    //// x, y
	glVertex2f(-1.0f, 0.6f);    //// x, y
	glEnd();
	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.5f, 0.5f); //// sky-blue

	glVertex2f(-0.91f, 0.4f);    //// x, y
	glVertex2f(-0.89f, 0.4f);    //// x, y

	glVertex2f(-0.89f, 0.57f);    //// x, y
	glVertex2f(-0.91f, 0.6f);    //// x, y
	glEnd();

	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.0f, 0.0f); //// sky-blue

	glVertex2f(-1.0f, 0.47f);    //// x, y
	glVertex2f(-0.97f, 0.47f);    //// x, y

	glVertex2f(-0.97f, 0.52f);    //// x, y
	glVertex2f(-1.0f, 0.52f);    //// x, y
	glEnd();
	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.0f, 0.0f); //// sky-blue

	glVertex2f(-0.96f, 0.47f);    //// x, y
	glVertex2f(-0.93f, 0.47f);    //// x, y

	glVertex2f(-0.93f, 0.52f);    //// x, y
	glVertex2f(-0.96f, 0.52f);    //// x, y
	glEnd();


	////2
	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.6f, 0.0f, 0.6f); //// sky-blue

	glVertex2f(-0.86f, 0.4f);    //// x, y
	glVertex2f(-0.76f, 0.4f);    //// x, y

	glVertex2f(-0.76f, 0.65f);    //// x, y
	glVertex2f(-0.86f, 0.65f);    //// x, y
	glEnd();
	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.4f, 0.0f, 0.4f); //// sky-blue

	glVertex2f(-0.76f, 0.4f);    //// x, y
	glVertex2f(-0.73f, 0.4f);    //// x, y

	glVertex2f(-0.73f, 0.62f);    //// x, y
	glVertex2f(-0.76f, 0.65f);    //// x, y
	glEnd();
////windows
	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.0f, 0.0f); //// sky-blue

	glVertex2f(-0.84f, 0.43f);    //// x, y
	glVertex2f(-0.81f, 0.43f);    //// x, y

	glVertex2f(-0.81f, 0.48f);    //// x, y
	glVertex2f(-0.84f, 0.48f);    //// x, y
	glEnd();
	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.0f, 0.0f); //// sky-blue

	glVertex2f(-0.8f, 0.43f);    //// x, y
	glVertex2f(-0.77f, 0.43f);    //// x, y

	glVertex2f(-0.77f, 0.48f);    //// x, y
	glVertex2f(-0.8f, 0.48f);    //// x, y
	glEnd();

	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.0f, 0.0f); //// sky-blue

	glVertex2f(-0.84f, 0.5f);    //// x, y
	glVertex2f(-0.81f, 0.5f);    //// x, y

	glVertex2f(-0.81f, 0.55f);    //// x, y
	glVertex2f(-0.84f, 0.55f);    //// x, y
	glEnd();
	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.0f, 0.0f); //// sky-blue

	glVertex2f(-0.8f, 0.5f);    //// x, y
	glVertex2f(-0.77f, 0.5f);    //// x, y

	glVertex2f(-0.77f, 0.55f);    //// x, y
	glVertex2f(-0.8f, 0.55f);    //// x, y
	glEnd();

	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.0f, 0.0f); //// sky-blue

	glVertex2f(-0.84f, 0.57f);    //// x, y
	glVertex2f(-0.81f, 0.57f);    //// x, y

	glVertex2f(-0.81f, 0.62f);    //// x, y
	glVertex2f(-0.84f, 0.62f);    //// x, y
	glEnd();
	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.0f, 0.0f); //// sky-blue

	glVertex2f(-0.8f, 0.57f);    //// x, y
	glVertex2f(-0.77f, 0.57f);    //// x, y

	glVertex2f(-0.77f, 0.62f);    //// x, y
	glVertex2f(-0.8f, 0.62f);    //// x, y
	glEnd();

	////3
	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.6f, 0.6f, 0.0f); //// sky-blue

	glVertex2f(-0.72f, 0.4f);    //// x, y
	glVertex2f(-0.62f, 0.4f);    //// x, y

	glVertex2f(-0.62f, 0.71f);    //// x, y
	glVertex2f(-0.72f, 0.71f);    //// x, y
	glEnd();
	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.4f, 0.4f, 0.0f); //// sky-blue

	glVertex2f(-0.62f, 0.4f);   //// x, y
	glVertex2f(-0.59f, 0.4f);    //// x, y

	glVertex2f(-0.59f, 0.65f);    //// x, y
	glVertex2f(-0.62f, 0.71f);    //// x, y
	glEnd();

	////windows
	////p1
	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.0f, 0.0f); //// sky-blue

	glVertex2f(-0.7f, 0.43f);    //// x, y
	glVertex2f(-0.67f, 0.43f);    //// x, y

	glVertex2f(-0.67f, 0.48f);    //// x, y
	glVertex2f(-0.7f, 0.48f);    //// x, y
	glEnd();
	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.0f, 0.0f); //// sky-blue

	glVertex2f(-0.66f, 0.43f);    //// x, y
	glVertex2f(-0.63f, 0.43f);    //// x, y

	glVertex2f(-0.63f, 0.48f);    //// x, y
	glVertex2f(-0.66f, 0.48f);    //// x, y
	glEnd();
	////p2

	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.0f, 0.0f); //// sky-blue

	glVertex2f(-0.7f, 0.5f);    //// x, y
	glVertex2f(-0.67f, 0.5f);    //// x, y

	glVertex2f(-0.67f, 0.55f);    //// x, y
	glVertex2f(-0.7f, 0.55f);    //// x, y
	glEnd();
	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.0f, 0.0f); //// sky-blue

	glVertex2f(-0.66f, 0.5f);    //// x, y
	glVertex2f(-0.63f, 0.5f);    //// x, y

	glVertex2f(-0.63f, 0.55f);    //// x, y
	glVertex2f(-0.66f, 0.55f);    //// x, y
	glEnd();
	////p3

	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.0f, 0.0f); //// sky-blue

	glVertex2f(-0.7f, 0.57f);    //// x, y
	glVertex2f(-0.67f, 0.57f);    //// x, y

	glVertex2f(-0.67f, 0.62f);    //// x, y
	glVertex2f(-0.7f, 0.62f);    //// x, y
	glEnd();
	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.0f, 0.0f); //// sky-blue

	glVertex2f(-0.66f, 0.57f);    //// x, y
	glVertex2f(-0.63f, 0.57f);    //// x, y

	glVertex2f(-0.63f, 0.62f);    //// x, y
	glVertex2f(-0.66f, 0.62f);    //// x, y
	glEnd();
    ////p4
	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.0f, 0.0f); //// sky-blue

	glVertex2f(-0.7f, 0.64f);    //// x, y
	glVertex2f(-0.67f, 0.64f);    //// x, y

	glVertex2f(-0.67f, 0.69f);    //// x, y
	glVertex2f(-0.7f, 0.69f);    //// x, y
	glEnd();
	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.0f, 0.0f); //// sky-blue

	glVertex2f(-0.66f, 0.64f);    //// x, y
	glVertex2f(-0.63f, 0.64f);    //// x, y

	glVertex2f(-0.63f, 0.69f);    //// x, y
	glVertex2f(-0.66f, 0.69f);    //// x, y
	glEnd();

	////4
	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.7f, 0.0f, 0.0f); //// sky-blue

	glVertex2f(-0.58f, 0.4f);    //// x, y
	glVertex2f(-0.48f, 0.4f);    //// x, y

	glVertex2f(-0.48f, 0.5f);    //// x, y
	glVertex2f(-0.58f, 0.5f);    //// x, y
	glEnd();
	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.5f, 0.0f, 0.0f); //// sky-blue

	glVertex2f(-0.48f, 0.4f);    //// x, y
	glVertex2f(-0.47f, 0.4f);    //// x, y

	glVertex2f(-0.47f, 0.48f);    //// x, y
	glVertex2f(-0.48f, 0.5f);    //// x, y
	glEnd();

	////windows
	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.0f, 0.0f); //// sky-blue

	glVertex2f(-0.56f, 0.43f);    //// x, y
	glVertex2f(-0.53f, 0.43f);    //// x, y

	glVertex2f(-0.53f, 0.48f);    //// x, y
	glVertex2f(-0.56f, 0.48f);    //// x, y
	glEnd();
	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.0f, 0.0f); //// sky-blue

	glVertex2f(-0.52f, 0.43f);    //// x, y
	glVertex2f(-0.49f, 0.43f);    //// x, y

	glVertex2f(-0.49f, 0.48f);    //// x, y
	glVertex2f(-0.52f, 0.48f);    //// x, y
	glEnd();

	////5

	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.6f, 0.6f, 0.6f); //// sky-blue

	glVertex2f(-0.45f, 0.4f);    //// x, y
	glVertex2f(-0.35f, 0.4f);    //// x, y

	glVertex2f(-0.35f, 0.72f);    //// x, y
	glVertex2f(-0.45f, 0.72f);    //// x, y
	glEnd();
	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.3f, 0.3f, 0.3f); //// sky-blue

	glVertex2f(-0.35f, 0.4f);   //// x, y
	glVertex2f(-0.33f, 0.4f);    //// x, y

	glVertex2f(-0.33f, 0.67f);    //// x, y
	glVertex2f(-0.35f, 0.72f);    //// x, y
	glEnd();

	////windows
	////p1
	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.0f, 0.0f); //// sky-blue

	glVertex2f(-0.43f, 0.43f);    //// x, y
	glVertex2f(-0.4f, 0.43f);    //// x, y

	glVertex2f(-0.4f, 0.48f);    //// x, y
	glVertex2f(-0.43f, 0.48f);    //// x, y
	glEnd();
	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.0f, 0.0f); //// sky-blue

	glVertex2f(-0.39f, 0.43f);    //// x, y
	glVertex2f(-0.36f, 0.43f);    //// x, y

	glVertex2f(-0.36f, 0.48f);    //// x, y
	glVertex2f(-0.39f, 0.48f);    //// x, y
	glEnd();
	////p2

	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.0f, 0.0f); //// sky-blue

	glVertex2f(-0.43f, 0.5f);    //// x, y
	glVertex2f(-0.4f, 0.5f);    //// x, y

	glVertex2f(-0.4f, 0.55f);    //// x, y
	glVertex2f(-0.43f, 0.55f);    //// x, y
	glEnd();
	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.0f, 0.0f); //// sky-blue

	glVertex2f(-0.39f, 0.5f);    //// x, y
	glVertex2f(-0.36f, 0.5f);    //// x, y

	glVertex2f(-0.36f, 0.55f);    //// x, y
	glVertex2f(-0.39f, 0.55f);    //// x, y
	glEnd();
	////p3

	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.0f, 0.0f); //// sky-blue

	glVertex2f(-0.43f, 0.57f);    //// x, y
	glVertex2f(-0.4f, 0.57f);    //// x, y

	glVertex2f(-0.4f, 0.62f);    //// x, y
	glVertex2f(-0.43f, 0.62f);    //// x, y
	glEnd();
	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.0f, 0.0f); //// sky-blue

	glVertex2f(-0.39f, 0.57f);    //// x, y
	glVertex2f(-0.36f, 0.57f);    //// x, y

	glVertex2f(-0.36f, 0.62f);    //// x, y
	glVertex2f(-0.39f, 0.62f);    //// x, y
	glEnd();
    ////p4
	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.0f, 0.0f); //// sky-blue

	glVertex2f(-0.43f, 0.64f);    //// x, y
	glVertex2f(-0.4f, 0.64f);    //// x, y

	glVertex2f(-0.4f, 0.69f);    //// x, y
	glVertex2f(-0.43f, 0.69f);    //// x, y
	glEnd();
	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.0f, 0.0f); //// sky-blue

	glVertex2f(-0.39f, 0.64f);    //// x, y
	glVertex2f(-0.36f, 0.64f);    //// x, y

	glVertex2f(-0.36f, 0.69f);    //// x, y
	glVertex2f(-0.39f, 0.69f);    //// x, y
	glEnd();

	////6
	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.6f, 0.0f, 0.3f); //// sky-blue

	glVertex2f(-0.3f, 0.4f);    //// x, y
	glVertex2f(-0.2f, 0.4f);    //// x, y

	glVertex2f(-0.2f, 0.6f);    //// x, y
	glVertex2f(-0.3f, 0.6f);    //// x, y
	glEnd();
	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.5f, 0.0f, 0.2f); //// sky-blue

	glVertex2f(-0.2f, 0.4f);    //// x, y
	glVertex2f(-0.18f, 0.4f);    //// x, y

	glVertex2f(-0.18f, 0.57f);    //// x, y
	glVertex2f(-0.2f, 0.6f);    //// x, y
	glEnd();

	////windows
	////p1
	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.0f, 0.0f); //// sky-blue

	glVertex2f(-0.28f, 0.43f);    //// x, y
	glVertex2f(-0.25f, 0.43f);    //// x, y

	glVertex2f(-0.25f, 0.48f);    //// x, y
	glVertex2f(-0.28f, 0.48f);    //// x, y
	glEnd();
	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.0f, 0.0f); //// sky-blue

	glVertex2f(-0.24f, 0.43f);    //// x, y
	glVertex2f(-0.21f, 0.43f);    //// x, y

	glVertex2f(-0.21f, 0.48f);    //// x, y
	glVertex2f(-0.24f, 0.48f);    //// x, y
	glEnd();
	////p2

	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.0f, 0.0f); //// sky-blue

	glVertex2f(-0.28f, 0.5f);    //// x, y
	glVertex2f(-0.25f, 0.5f);    //// x, y

	glVertex2f(-0.25f, 0.55f);    //// x, y
	glVertex2f(-0.28f, 0.55f);    //// x, y
	glEnd();
	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.0f, 0.0f); //// sky-blue

	glVertex2f(-0.24f, 0.5f);    //// x, y
	glVertex2f(-0.21f, 0.5f);    //// x, y

	glVertex2f(-0.21f, 0.55f);    //// x, y
	glVertex2f(-0.24f, 0.55f);    //// x, y
	glEnd();

	////7
	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.9f, 0.9f, 0.0f); //// sky-blue

	glVertex2f(-0.17f, 0.4f);    //// x, y
	glVertex2f(-0.07f, 0.4f);    //// x, y

	glVertex2f(-0.07f, 0.65f);    //// x, y
	glVertex2f(-0.17f, 0.65f);    //// x, y
	glEnd();
	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.7f, 0.7f, 0.0f); //// sky-blue

	glVertex2f(-0.07f, 0.4f);    //// x, y
	glVertex2f(-0.06f, 0.4f);    //// x, y

	glVertex2f(-0.06f, 0.62f);    //// x, y
	glVertex2f(-0.07f, 0.65f);    //// x, y
	glEnd();
    ////windows
	////p1
	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.0f, 0.0f); //// sky-blue

	glVertex2f(-0.16f, 0.43f);    //// x, y
	glVertex2f(-0.13f, 0.43f);    //// x, y

	glVertex2f(-0.13f, 0.48f);    //// x, y
	glVertex2f(-0.16f, 0.48f);    //// x, y
	glEnd();
	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.0f, 0.0f); //// sky-blue

	glVertex2f(-0.12f, 0.43f);    //// x, y
	glVertex2f(-0.09f, 0.43f);    //// x, y

	glVertex2f(-0.09f, 0.48f);    //// x, y
	glVertex2f(-0.12f, 0.48f);    //// x, y
	glEnd();
	////p2

	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.0f, 0.0f); //// sky-blue

	glVertex2f(-0.16f, 0.5f);    //// x, y
	glVertex2f(-0.13f, 0.5f);    //// x, y

	glVertex2f(-0.13f, 0.55f);    //// x, y
	glVertex2f(-0.16f, 0.55f);    //// x, y
	glEnd();
	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.0f, 0.0f); //// sky-blue

	glVertex2f(-0.12f, 0.5f);    //// x, y
	glVertex2f(-0.09f, 0.5f);    //// x, y

	glVertex2f(-0.09f, 0.55f);    //// x, y
	glVertex2f(-0.12f, 0.55f);    //// x, y
	glEnd();
	////p3

	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.0f, 0.0f); //// sky-blue

	glVertex2f(-0.16f, 0.57f);    //// x, y
	glVertex2f(-0.13f, 0.57f);    //// x, y

	glVertex2f(-0.13f, 0.62f);    //// x, y
	glVertex2f(-0.16f, 0.62f);    //// x, y
	glEnd();
	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.0f, 0.0f); //// sky-blue

	glVertex2f(-0.12f, 0.57f);    //// x, y
	glVertex2f(-0.09f, 0.57f);    //// x, y

	glVertex2f(-0.09f, 0.62f);    //// x, y
	glVertex2f(-0.12f, 0.62f);    //// x, y
	glEnd();

	////8
	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.4f, 0.4f); //// sky-blue

	glVertex2f(-0.04f, 0.4f);    //// x, y
	glVertex2f(0.04f, 0.4f);    //// x, y

	glVertex2f(0.04f, 0.71f);    //// x, y
	glVertex2f(-0.04f, 0.71f);    //// x, y
	glEnd();
	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.1f, 0.1f); //// sky-blue

	glVertex2f(0.04f, 0.4f);    //// x, y
	glVertex2f(0.043f, 0.4f);    //// x, y

	glVertex2f(0.043f, 0.65f);    //// x, y
	glVertex2f(0.04f, 0.71f);    //// x, y
	glEnd();

	////windows
	////p1
	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.0f, 0.0f); //// sky-blue

	glVertex2f(-0.03f, 0.43f);    //// x, y
	glVertex2f(-0.01f, 0.43f);    //// x, y

	glVertex2f(-0.01f, 0.48f);    //// x, y
	glVertex2f(-0.03f, 0.48f);    //// x, y
	glEnd();
	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.0f, 0.0f); //// sky-blue

	glVertex2f(0.01f, 0.43f);    //// x, y
	glVertex2f(0.03f, 0.43f);    //// x, y

	glVertex2f(0.03f, 0.48f);    //// x, y
	glVertex2f(0.01f, 0.48f);    //// x, y
	glEnd();
	////p2

	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.0f, 0.0f); //// sky-blue

	glVertex2f(-0.03f, 0.5f);    //// x, y
	glVertex2f(-0.01f, 0.5f);    //// x, y

	glVertex2f(-0.01f, 0.55f);    //// x, y
	glVertex2f(-0.03f, 0.55f);    //// x, y
	glEnd();
	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.0f, 0.0f); //// sky-blue

	glVertex2f(0.01f, 0.5f);    //// x, y
	glVertex2f(0.03f, 0.5f);    //// x, y

	glVertex2f(0.03f, 0.55f);    //// x, y
	glVertex2f(0.01f, 0.55f);    //// x, y
	glEnd();
	////p3

	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.0f, 0.0f); //// sky-blue

	glVertex2f(-0.03f, 0.57f);    //// x, y
	glVertex2f(-0.01f, 0.57f);    //// x, y

	glVertex2f(-0.01f, 0.62f);    //// x, y
	glVertex2f(-0.03f, 0.62f);    //// x, y
	glEnd();
	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.0f, 0.0f); //// sky-blue

	glVertex2f(0.01f, 0.57f);    //// x, y
	glVertex2f(0.03f, 0.57f);    //// x, y

	glVertex2f(0.03f, 0.62f);    //// x, y
	glVertex2f(0.01f, 0.62f);    //// x, y
	glEnd();
    ////p4
	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.0f, 0.0f); //// sky-blue

	glVertex2f(-0.03f, 0.64f);    //// x, y
	glVertex2f(-0.01f, 0.64f);    //// x, y

	glVertex2f(-0.01f, 0.69f);    //// x, y
	glVertex2f(-0.03f, 0.69f);    //// x, y
	glEnd();
	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.0f, 0.0f); //// sky-blue

	glVertex2f(0.01f, 0.64f);    //// x, y
	glVertex2f(0.03f, 0.64f);    //// x, y

	glVertex2f(0.03f, 0.69f);    //// x, y
	glVertex2f(0.01f, 0.69f);    //// x, y
	glEnd();

	////9
    glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.6f, 0.0f, 0.0f); //// sky-blue

	glVertex2f(0.08f, 0.4f);    //// x, y
	glVertex2f(0.18f, 0.4f);    //// x, y

	glVertex2f(0.18f, 0.6f);    //// x, y
	glVertex2f(0.08f, 0.6f);    //// x, y
	glEnd();
	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.4f, 0.0f, 0.0f); //// sky-blue

	glVertex2f(0.07f, 0.4f);    //// x, y
	glVertex2f(0.08f, 0.4f);    //// x, y

	glVertex2f(0.08f, 0.6f);    //// x, y
	glVertex2f(0.07f, 0.55f);    //// x, y
	glEnd();

	////windows
	////p1
	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.0f, 0.0f); //// sky-blue

	glVertex2f(0.09f, 0.43f);    //// x, y
	glVertex2f(0.12f, 0.43f);    //// x, y

	glVertex2f(0.12f, 0.48f);    //// x, y
	glVertex2f(0.09f, 0.48f);    //// x, y
	glEnd();
	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.0f, 0.0f); //// sky-blue

	glVertex2f(0.13f, 0.43f);    //// x, y
	glVertex2f(0.16f, 0.43f);    //// x, y

	glVertex2f(0.16f, 0.48f);    //// x, y
	glVertex2f(0.13f, 0.48f);    //// x, y
	glEnd();
	////p2

	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.0f, 0.0f); //// sky-blue

	glVertex2f(0.09f, 0.5f);    //// x, y
	glVertex2f(0.12f, 0.5f);    //// x, y

	glVertex2f(0.12f, 0.55f);    //// x, y
	glVertex2f(0.09f, 0.55f);    //// x, y
	glEnd();
	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.0f, 0.0f); //// sky-blue

	glVertex2f(0.13f, 0.5f);    //// x, y
	glVertex2f(0.16f, 0.5f);    //// x, y

	glVertex2f(0.16f, 0.55f);    //// x, y
	glVertex2f(0.13f, 0.55f);    //// x, y
	glEnd();

		////10
	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.7f, 0.7f, 0.7f); //// sky-blue

	glVertex2f(0.22f, 0.4f);    //// x, y
	glVertex2f(0.32f, 0.4f);    //// x, y

	glVertex2f(0.32f, 0.65f);    //// x, y
	glVertex2f(0.22f, 0.65f);    //// x, y
	glEnd();
	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.5f, 0.5f, 0.5f); //// sky-blue

	glVertex2f(0.2f, 0.4f);    //// x, y
	glVertex2f(0.22f, 0.4f);    //// x, y

	glVertex2f(0.22f, 0.65f);    //// x, y
	glVertex2f(0.2f, 0.62f);    //// x, y
	glEnd();
    ////windows
	////p1
	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.0f, 0.0f); //// sky-blue

	glVertex2f(0.24f, 0.43f);    //// x, y
	glVertex2f(0.27f, 0.43f);    //// x, y

	glVertex2f(0.27f, 0.48f);    //// x, y
	glVertex2f(0.24f, 0.48f);    //// x, y
	glEnd();
	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.0f, 0.0f); //// sky-blue

	glVertex2f(0.28f, 0.43f);    //// x, y
	glVertex2f(0.31f, 0.43f);    //// x, y

	glVertex2f(0.31f, 0.48f);    //// x, y
	glVertex2f(0.28f, 0.48f);    //// x, y
	glEnd();
	////p2

	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.0f, 0.0f); //// sky-blue

	glVertex2f(0.24f, 0.5f);    //// x, y
	glVertex2f(0.27f, 0.5f);    //// x, y

	glVertex2f(0.27f, 0.55f);    //// x, y
	glVertex2f(0.24f, 0.55f);    //// x, y
	glEnd();
	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.0f, 0.0f); //// sky-blue

	glVertex2f(0.28f, 0.5f);    //// x, y
	glVertex2f(0.31f, 0.5f);    //// x, y

	glVertex2f(0.31f, 0.55f);    //// x, y
	glVertex2f(0.28f, 0.55f);    //// x, y
	glEnd();
	////p3

	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.0f, 0.0f); //// sky-blue

	glVertex2f(0.24f, 0.57f);    //// x, y
	glVertex2f(0.27f, 0.57f);    //// x, y

	glVertex2f(0.27f, 0.62f);    //// x, y
	glVertex2f(0.24f, 0.62f);    //// x, y
	glEnd();
	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.0f, 0.0f); //// sky-blue

	glVertex2f(0.28f, 0.57f);    //// x, y
	glVertex2f(0.31f, 0.57f);    //// x, y

	glVertex2f(0.31f, 0.62f);    //// x, y
	glVertex2f(0.28f, 0.62f);    //// x, y
	glEnd();

    ////11

	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.6f, 0.0f, 0.6f); //// sky-blue

	glVertex2f(0.34f, 0.4f);    //// x, y
	glVertex2f(0.44f, 0.4f);    //// x, y

	glVertex2f(0.44f, 0.72f);    //// x, y
	glVertex2f(0.34f, 0.72f);    //// x, y
	glEnd();
	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.3f, 0.0f, 0.3f); //// sky-blue

	glVertex2f(0.33f, 0.4f);   //// x, y
	glVertex2f(0.34f, 0.4f);    //// x, y

	glVertex2f(0.34f, 0.72f);    //// x, y
	glVertex2f(0.33f, 0.7f);    //// x, y
	glEnd();

	////windows
	////p1
	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.0f, 0.0f); //// sky-blue

	glVertex2f(0.35f, 0.43f);    //// x, y
	glVertex2f(0.38f, 0.43f);    //// x, y

	glVertex2f(0.38f, 0.48f);    //// x, y
	glVertex2f(0.35f, 0.48f);    //// x, y
	glEnd();
	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.0f, 0.0f); //// sky-blue

	glVertex2f(0.4f, 0.43f);    //// x, y
	glVertex2f(0.43f, 0.43f);    //// x, y

	glVertex2f(0.43f, 0.48f);    //// x, y
	glVertex2f(0.4f, 0.48f);    //// x, y
	glEnd();
	////p2

	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.0f, 0.0f); //// sky-blue

	glVertex2f(0.35f, 0.5f);    //// x, y
	glVertex2f(0.38f, 0.5f);    //// x, y

	glVertex2f(0.38f, 0.55f);    //// x, y
	glVertex2f(0.35f, 0.55f);    //// x, y
	glEnd();
	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.0f, 0.0f); //// sky-blue

	glVertex2f(0.4f, 0.5f);    //// x, y
	glVertex2f(0.43f, 0.5f);    //// x, y

	glVertex2f(0.43f, 0.55f);    //// x, y
	glVertex2f(0.4f, 0.55f);    //// x, y
	glEnd();
	////p3

	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.0f, 0.0f); //// sky-blue

	glVertex2f(0.35f, 0.57f);    //// x, y
	glVertex2f(0.38f, 0.57f);    //// x, y

	glVertex2f(0.38f, 0.62f);    //// x, y
	glVertex2f(0.35f, 0.62f);    //// x, y
	glEnd();
	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.0f, 0.0f); //// sky-blue

	glVertex2f(0.4f, 0.57f);    //// x, y
	glVertex2f(0.43f, 0.57f);    //// x, y

	glVertex2f(0.43f, 0.62f);    //// x, y
	glVertex2f(0.4f, 0.62f);    //// x, y
	glEnd();
    ////p4
	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.0f, 0.0f); //// sky-blue

	glVertex2f(0.35f, 0.64f);    //// x, y
	glVertex2f(0.38f, 0.64f);    //// x, y

	glVertex2f(0.38f, 0.69f);    //// x, y
	glVertex2f(0.35f, 0.69f);    //// x, y
	glEnd();
	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.0f, 0.0f); //// sky-blue

	glVertex2f(0.4f, 0.64f);    //// x, y
	glVertex2f(0.43f, 0.64f);    //// x, y

	glVertex2f(0.43f, 0.69f);    //// x, y
	glVertex2f(0.4f, 0.69f);    //// x, y
	glEnd();

	////12
	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.9f, 0.9f, 0.0f); //// sky-blue

	glVertex2f(0.47f, 0.4f);    //// x, y
	glVertex2f(0.57f, 0.4f);    //// x, y

	glVertex2f(0.57f, 0.6f);    //// x, y
	glVertex2f(0.47f, 0.6f);    //// x, y
	glEnd();
	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.5f, 0.0f); //// sky-blue

	glVertex2f(0.46f, 0.4f);    //// x, y
	glVertex2f(0.47f, 0.4f);    //// x, y

	glVertex2f(0.47f, 0.6f);    //// x, y
	glVertex2f(0.46f, 0.57f);    //// x, y
	glEnd();

	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.0f, 0.0f); //// sky-blue

	glVertex2f(0.49f, 0.47f);    //// x, y
	glVertex2f(0.52f, 0.47f);    //// x, y

	glVertex2f(0.52f, 0.54f);    //// x, y
	glVertex2f(0.49f, 0.54f);    //// x, y
	glEnd();
	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.0f, 0.0f); //// sky-blue

	glVertex2f(0.53f, 0.47f);    //// x, y
	glVertex2f(0.56f, 0.47f);    //// x, y

	glVertex2f(0.56f, 0.54f);    //// x, y
	glVertex2f(0.53f, 0.54f);    //// x, y
	glEnd();

	////13
	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.7f, 0.7f); //// sky-blue

	glVertex2f(0.6f, 0.4f);    //// x, y
	glVertex2f(0.7f, 0.4f);    //// x, y

	glVertex2f(0.7f, 0.65f);    //// x, y
	glVertex2f(0.6f, 0.65f);    //// x, y
	glEnd();
	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.5f, 0.5f, 0.5f); //// sky-blue

	glVertex2f(0.58f, 0.4f);    //// x, y
	glVertex2f(0.6f, 0.4f);    //// x, y

	glVertex2f(0.6f, 0.65f);    //// x, y
	glVertex2f(0.58f, 0.62f);    //// x, y
	glEnd();
    ////windows
	////p1
	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.0f, 0.0f); //// sky-blue

	glVertex2f(0.61f, 0.43f);    //// x, y
	glVertex2f(0.64f, 0.43f);    //// x, y

	glVertex2f(0.64f, 0.48f);    //// x, y
	glVertex2f(0.61f, 0.48f);    //// x, y
	glEnd();
	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.0f, 0.0f); //// sky-blue

	glVertex2f(0.66f, 0.43f);    //// x, y
	glVertex2f(0.69f, 0.43f);    //// x, y

	glVertex2f(0.69f, 0.48f);    //// x, y
	glVertex2f(0.66f, 0.48f);    //// x, y
	glEnd();
	////p2

	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.0f, 0.0f); //// sky-blue

	glVertex2f(0.61f, 0.5f);    //// x, y
	glVertex2f(0.64f, 0.5f);    //// x, y

	glVertex2f(0.64f, 0.55f);    //// x, y
	glVertex2f(0.61f, 0.55f);    //// x, y
	glEnd();
	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.0f, 0.0f); //// sky-blue

	glVertex2f(0.66f, 0.5f);    //// x, y
	glVertex2f(0.69f, 0.5f);    //// x, y

	glVertex2f(0.69f, 0.55f);    //// x, y
	glVertex2f(0.66f, 0.55f);    //// x, y
	glEnd();
	////p3

	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.0f, 0.0f); //// sky-blue

	glVertex2f(0.61f, 0.57f);    //// x, y
	glVertex2f(0.64f, 0.57f);    //// x, y

	glVertex2f(0.64f, 0.62f);    //// x, y
	glVertex2f(0.61f, 0.62f);    //// x, y
	glEnd();
	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.0f, 0.0f); //// sky-blue

	glVertex2f(0.66f, 0.57f);    //// x, y
	glVertex2f(0.69f, 0.57f);    //// x, y

	glVertex2f(0.69f, 0.62f);    //// x, y
	glVertex2f(0.66f, 0.62f);    //// x, y
	glEnd();

	////14
	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.6f, 0.0f, 0.0f); //// sky-blue

	glVertex2f(0.74f, 0.4f);    //// x, y
	glVertex2f(0.84f, 0.4f);    //// x, y

	glVertex2f(0.84f, 0.72f);    //// x, y
	glVertex2f(0.74f, 0.72f);    //// x, y
	glEnd();
	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.3f, 0.0f, 0.0f); //// sky-blue

	glVertex2f(0.72f, 0.4f);   //// x, y
	glVertex2f(0.74f, 0.4f);    //// x, y

	glVertex2f(0.74f, 0.72f);    //// x, y
	glVertex2f(0.72f, 0.7f);    //// x, y
	glEnd();

	////windows
	////p1
	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.0f, 0.0f); //// sky-blue

	glVertex2f(0.76f, 0.43f);    //// x, y
	glVertex2f(0.79f, 0.43f);    //// x, y

	glVertex2f(0.79f, 0.48f);    //// x, y
	glVertex2f(0.76f, 0.48f);    //// x, y
	glEnd();
	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.0f, 0.0f); //// sky-blue

	glVertex2f(0.8f, 0.43f);    //// x, y
	glVertex2f(0.83f, 0.43f);    //// x, y

	glVertex2f(0.83f, 0.48f);    //// x, y
	glVertex2f(0.8f, 0.48f);    //// x, y
	glEnd();
	////p2

	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.0f, 0.0f); //// sky-blue

	glVertex2f(0.76f, 0.5f);    //// x, y
	glVertex2f(0.79f, 0.5f);    //// x, y

	glVertex2f(0.79f, 0.55f);    //// x, y
	glVertex2f(0.76f, 0.55f);    //// x, y
	glEnd();
	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.0f, 0.0f); //// sky-blue

	glVertex2f(0.8f, 0.5f);    //// x, y
	glVertex2f(0.83f, 0.5f);    //// x, y

	glVertex2f(0.83f, 0.55f);    //// x, y
	glVertex2f(0.8f, 0.55f);    //// x, y
	glEnd();
	////p3

	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.0f, 0.0f); //// sky-blue

	glVertex2f(0.76f, 0.57f);    //// x, y
	glVertex2f(0.79f, 0.57f);    //// x, y

	glVertex2f(0.79f, 0.62f);    //// x, y
	glVertex2f(0.76f, 0.62f);    //// x, y
	glEnd();
	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.0f, 0.0f); //// sky-blue

	glVertex2f(0.8f, 0.57f);    //// x, y
	glVertex2f(0.83f, 0.57f);    //// x, y

	glVertex2f(0.83f, 0.62f);    //// x, y
	glVertex2f(0.8f, 0.62f);    //// x, y
	glEnd();
    ////p4
	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.0f, 0.0f); //// sky-blue

	glVertex2f(0.76f, 0.64f);    //// x, y
	glVertex2f(0.79f, 0.64f);    //// x, y

	glVertex2f(0.79f, 0.69f);    //// x, y
	glVertex2f(0.76f, 0.69f);    //// x, y
	glEnd();
	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.0f, 0.0f); //// sky-blue

	glVertex2f(0.8f, 0.64f);    //// x, y
	glVertex2f(0.83f, 0.64f);    //// x, y

	glVertex2f(0.83f, 0.69f);    //// x, y
	glVertex2f(0.8f, 0.69f);    //// x, y
	glEnd();

	////15
	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.6f, 0.5f, 0.2f); //// sky-blue

	glVertex2f(1.0f, 0.4f);    //// x, y
	glVertex2f(0.91f, 0.4f);    //// x, y

	glVertex2f(0.91f, 0.6f);    //// x, y
	glVertex2f(1.0f, 0.6f);    //// x, y
	glEnd();
	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.5f, 0.4f, 0.2f); //// sky-blue

	glVertex2f(0.91f, 0.4f);    //// x, y
	glVertex2f(0.89f, 0.4f);    //// x, y

	glVertex2f(0.89f, 0.57f);    //// x, y
	glVertex2f(0.91f, 0.6f);    //// x, y
	glEnd();

	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.0f, 0.0f); //// sky-blue

	glVertex2f(1.0f, 0.47f);    //// x, y
	glVertex2f(0.97f, 0.47f);    //// x, y

	glVertex2f(0.97f, 0.52f);    //// x, y
	glVertex2f(1.0f, 0.52f);    //// x, y
	glEnd();
	glBegin(GL_QUADS);              //// Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.0f, 0.0f); //// sky-blue

	glVertex2f(0.96f, 0.47f);    //// x, y
	glVertex2f(0.93f, 0.47f);    //// x, y

	glVertex2f(0.93f, 0.52f);    //// x, y
	glVertex2f(0.96f, 0.52f);    //// x, y
	glEnd();


	///cloud
    glPushMatrix();
        glTranslatef(cloudPosition,0.9,0);
        glScalef(0.6,0.6,1);
        cloud(-0.4,0);
        cloud(0.4,0);
    glPopMatrix();
    ///plane
    if(covidPhase==3)
    {
        glPushMatrix();
        glTranslatef(planePosition,0,0);
        plane();
        glPopMatrix();
    }


}
void rain(float x_axis, float y_axis)
{
    glLineWidth(2);
    glColor3f(1,1,1);
    glBegin(GL_LINES);
    glVertex2f(0+x_axis,0+y_axis);
    glVertex2f(0.01+x_axis, 0.06+y_axis);
    glEnd();
}
void rainSeason()
{
    glPushMatrix();
    glTranslatef(0, rainPosition, 0);
    for(float x=-1; x<=1; x+=0.04)
    {
        for(float y=-1; y<=1; y+=0.1)
        {
            rain(x,y);
            rain(x,y+1.0);
            rain(x,y-1.0);
        }
    }
    glPopMatrix();
}
void WalkWay()
{
    //walkingWay


    glBegin(GL_QUADS);              // Each set of 4 vertices form a quad
    glColor3f(0.4f, 0.0f, 0.3f); // Red

    glVertex2f(-1.0f, -0.3f);    // x, y
    glVertex2f(1.0f, -0.3f);    // x, y

    glVertex2f(1.0f, -0.1f);    // x, y
    glVertex2f(-1.0f, -0.1f);    // x, y
    glEnd();

	if(isWinter)
    {
        glPointSize(10.0);
        glColor3f(1,1,1);
        circle(-0.65, -0.11, 0.02);
        circle(0.72, -0.28, 0.02);
        circle(-0.51, -0.13, 0.02);
        circle(0.10, -0.28, 0.02);
        circle(-0.65, -0.15, 0.02);
        circle(0.72, -0.13, 0.02);
        circle(0.51, -0.24, 0.02);
        circle(0.10, -0.14, 0.02);
        glEnd();
    }

}

void winterSeason()
{
    glPushMatrix();
    glTranslatef(0,icePosition, 0);
    for(float x=-1; x<=1; x+=0.1)
    {
        glPointSize(4.0);
        glColor3f(1,1,1);
        glBegin(GL_POINTS);
        for(float y=-1; y<=1; y+=0.1)
        {
            glVertex2f(0.0+x, -1.0+y);
            glVertex2f(0.0+x, 0.0+y);
            glVertex2f(0.0+x, 1.0+y);
        }
        glEnd();
    }
    glPopMatrix();
}



void road(){
   //--------------------Road for Car---------------------

glBegin(GL_QUADS);              // Each set of 4 vertices form a quad
glColor3f(0.2f, 0.2f, 0.2f); // Red

glVertex2f(-1.0f, -1.0f);    // x, y
glVertex2f(1.0f, -1.0f);    // x, y
glVertex2f(1.0f, -0.35f);    // x, y
glVertex2f(-1.0f, -0.35f);    // x, y
glEnd();


//-------------road white-black side(black)----------------

glBegin(GL_QUADS);              // Each set of 4 vertices form a quad
glColor3f(0.0f, 0.0f, 0.0f); // Red

glVertex2f(-1.0f, -0.35f);    // x, y
glVertex2f(1.0f, -0.35f);    // x, y
glVertex2f(1.0f, -0.3f);    // x, y
glVertex2f(-1.0f, -0.3f);    // x, y
glEnd();

///////////-------------road white-black side(white)----------------////////
   glBegin(GL_QUADS);              // Each set of 4 vertices form a quad
glColor3f(1.0f, 1.0f, 1.0f); // Red

glVertex2f(-1.0f, -0.35f);    // x, y
glVertex2f(-0.80f, -0.35f);    // x, y
glVertex2f(-0.80f, -0.3f);    // x, y
glVertex2f(-1.0f, -0.3f);    // x, y
glEnd();

   glBegin(GL_QUADS);              // Each set of 4 vertices form a quad
glColor3f(1.0f, 1.0f, 1.0f); // Red

glVertex2f(-0.60f, -0.35f);    // x, y
glVertex2f(-0.40f, -0.35f);    // x, y
glVertex2f(-0.40f, -0.3f);    // x, y
glVertex2f(-0.60f, -0.3f);    // x, y
glEnd();

   glBegin(GL_QUADS);              // Each set of 4 vertices form a quad
glColor3f(1.0f, 1.0f, 1.0f); // Red

glVertex2f(-0.20f, -0.35f);    // x, y
glVertex2f(0.00f, -0.35f);    // x, y
glVertex2f(0.00f, -0.3f);    // x, y
glVertex2f(-0.20f, -0.3f);    // x, y
glEnd();

   glBegin(GL_QUADS);              // Each set of 4 vertices form a quad
glColor3f(1.0f, 1.0f, 1.0f); // Red

glVertex2f(0.20f, -0.35f);    // x, y
glVertex2f(0.40f, -0.35f);    // x, y
glVertex2f(0.40f, -0.3f);    // x, y
glVertex2f(0.20f, -0.3f);    // x, y
glEnd();

   glBegin(GL_QUADS);              // Each set of 4 vertices form a quad
glColor3f(1.0f, 1.0f, 1.0f); // Red

glVertex2f(0.60f, -0.35f);    // x, y
glVertex2f(0.80f, -0.35f);    // x, y
glVertex2f(0.80f, -0.3f);    // x, y
glVertex2f(0.60f, -0.3f);    // x, y
glEnd();



//------------------road yellow line-----------

   glBegin(GL_QUADS);              // Each set of 4 vertices form a quad
glColor3f(0.90f, 1.0f, 0.3f); // Red

glVertex2f(-1.0f, -0.67f);    // x, y
glVertex2f(-0.80f, -0.67f);    // x, y
glVertex2f(-0.80f, -0.7f);    // x, y
glVertex2f(-1.0f, -0.7f);    // x, y
glEnd();

   glBegin(GL_QUADS);              // Each set of 4 vertices form a quad
glColor3f(0.90f, 1.0f, 0.3f); // Red

glVertex2f(-0.60f, -0.67f);    // x, y
glVertex2f(-0.40f, -0.67f);    // x, y
glVertex2f(-0.40f, -0.7f);    // x, y
glVertex2f(-0.60f, -0.7f);    // x, y
glEnd();

   glBegin(GL_QUADS);              // Each set of 4 vertices form a quad
glColor3f(0.90f, 1.0f, 0.3f); // Red

glVertex2f(-0.20f, -0.67f);    // x, y
glVertex2f(0.00f, -0.67f);    // x, y
glVertex2f(0.00f, -0.7f);    // x, y
glVertex2f(-0.20f, -0.7f);    // x, y
glEnd();

   glBegin(GL_QUADS);              // Each set of 4 vertices form a quad
glColor3f(0.90f, 1.0f, 0.3f); // Red

glVertex2f(0.20f, -0.67f);    // x, y
glVertex2f(0.40f, -0.67f);    // x, y
glVertex2f(0.40f, -0.7f);    // x, y
glVertex2f(0.20f, -0.7f);    // x, y
glEnd();

   glBegin(GL_QUADS);              // Each set of 4 vertices form a quad
glColor3f(0.90f, 1.0f, 0.3f); // Red

glVertex2f(0.60f, -0.67f);    // x, y
glVertex2f(0.80f, -0.67f);    // x, y
glVertex2f(0.80f, -0.7f);    // x, y
glVertex2f(0.60f, -0.7f);    // x, y
glEnd();


}


void car1(){
//------------car1-----------------------------

    glPushMatrix();
    glTranslatef(-car1position,0.0f, 0.0f);
    //car-1
    glBegin(GL_QUADS);
    glColor3f(0.9f,0.9f,1.0f);
    glVertex2f(0.45f, -0.85f);
    glVertex2f(0.5f, -0.75f);
    glVertex2f(0.6f, -0.75f);
    glVertex2f(0.65f, -0.85f);

    glEnd();


    glBegin(GL_QUADS);
    glColor3f(0.9f,0.8f,1.0f);
    glVertex2f(0.4f, -0.95f);
    glVertex2f(0.4f, -0.85f);
    glVertex2f(0.7f, -0.85f);
    glVertex2f(0.7f, -0.95f);

    glEnd();

    glBegin(GL_LINES);              // Each set of 4 vertices form a quad
    glColor3f(0.0f, 0.0f, 0.0f); // Red
    glVertex2f(0.45f, -0.85f);    // x, y
    glVertex2f(0.65f, -0.85f);    // x, y

    glEnd();

    glBegin(GL_LINES);              // Each set of 4 vertices form a quad
    glColor3f(0.0f, 0.0f, 0.0f); // Red
    glVertex2f(0.55f, -0.85f);    // x, y
    glVertex2f(0.55f, -0.75f);    // x, y

    glEnd();
    ///----wheel1-----

    glPushMatrix();
    glTranslatef(0.65,-0.95,0);
    glRotatef(wheel_angle, 0,0,1);
    glScalef(0.6,0.6,1);
    wheel();
    glPopMatrix();

    ///----wheel2-----

    glPushMatrix();
    glTranslatef(0.45,-0.95,0);
    glScalef(0.6,0.6,1);
    glRotatef(wheel_angle,0,0,1);
    wheel();
    glPopMatrix();

    glPopMatrix();


}

void car2(){

   glPushMatrix();
   glTranslatef(car2position,0.0f, 0.0f);

   glBegin(GL_QUADS);
   glColor3f(1.0f,1.0f,1.0f);
   glVertex2f(-0.45f, -0.5f);
glVertex2f(-0.5f, -0.4f);
glVertex2f(-0.6f, -0.4f);
glVertex2f(-0.65f, -0.5f);

glEnd();

   glBegin(GL_QUADS);
   glColor3f(1.0f,0.0f,0.0f);
   glVertex2f(-0.4f, -0.6f);
glVertex2f(-0.4f, -0.5f);
glVertex2f(-0.7f, -0.5f);
glVertex2f(-0.7f, -0.6f);

glEnd();


   glBegin(GL_LINES);              // Each set of 4 vertices form a quad
glColor3f(1.0f,0.0f,0.0f); // Red
glVertex2f(-0.55f, -0.5f);    // x, y
glVertex2f(-0.55f, -0.4f);    // x, y

glEnd();

    ///----wheel1-----

    glPushMatrix();
    glTranslatef(-0.45,-0.6,0);
    glRotatef(-wheel_angle, 0,0,1);
    glScalef(0.6,0.6,1);
    wheel();
    glPopMatrix();

    ///----wheel2-----

    glPushMatrix();
    glTranslatef(-0.65,-0.6,0);
    glScalef(0.6,0.6,1);
    glRotatef(-wheel_angle,0,0,1);
    wheel();
    glPopMatrix();

    glPopMatrix();
}


void ambulance()
{
    /// ambulance
    glBegin(GL_QUADS);/// white ambulance down body
	glColor3f(1.0f, 1.0f, 1.0f);

    glVertex2f(-0.7f, -0.35f);
	glVertex2f(-0.7f, -0.45f);
    glVertex2f(-0.35f, -0.45f);
	glVertex2f(-0.36f, -0.35f);
    glEnd();

    	     glBegin(GL_QUADS);/// yellow quads
	glColor3f(1.0f, 1.0f, 0.0f);

    glVertex2f(-0.39f, -0.35f);
	glVertex2f(-0.39f, -0.37f);
    glVertex2f(-0.357f, -0.37f);
	glVertex2f(-0.36f, -0.35f);
    glEnd();

    	     glBegin(GL_QUADS);/// black ambulance start
	glColor3f(0.2f, 0.2f, 0.2f);

    glVertex2f(-0.71f, -0.43f);
	glVertex2f(-0.71f, -0.45f);
    glVertex2f(-0.69f, -0.45f);
	glVertex2f(-0.69f, -0.43f);
    glEnd();

        	     glBegin(GL_QUADS);/// black ambulance end
	glColor3f(0.2f, 0.2f, 0.2f);

    glVertex2f(-0.36f, -0.43f);
	glVertex2f(-0.36f, -0.45f);
    glVertex2f(-0.34f, -0.45f);
	glVertex2f(-0.34f, -0.43f);
    glEnd();

    	     glBegin(GL_QUADS);/// red ambulance middle line
	glColor3f(1.0f, 0.0f, 0.0f);

    glVertex2f(-0.7f, -0.343f);
	glVertex2f(-0.7f, -0.35f);
    glVertex2f(-0.36f, -0.35f);
	glVertex2f(-0.363f, -0.343f);
    glEnd();

        	     glBegin(GL_QUADS);/// white ambulance middle body
	glColor3f(1.0f, 1.0f, 1.0f);

    glVertex2f(-0.7f, -0.31f);
	glVertex2f(-0.7f, -0.343f);
    glVertex2f(-0.363f, -0.343f);
	glVertex2f(-0.39f, -0.31f);
    glEnd();

        	     glBegin(GL_QUADS);/// red ambulance middle body end
	glColor3f(1.0f, 0.0f, 0.0f);

    glVertex2f(-0.7f, -0.31f);
	glVertex2f(-0.7f, -0.343f);
    glVertex2f(-0.69f, -0.343f);
	glVertex2f(-0.69f, -0.31f);
    glEnd();



    	     glBegin(GL_QUADS);/// white ambulance up body
	glColor3f(1.0f, 1.0f, 1.0f);

    glVertex2f(-0.65f, -0.17f);
	glVertex2f(-0.7f, -0.31f);
    glVertex2f(-0.39f, -0.31f);
	glVertex2f(-0.43f, -0.17f);
    glEnd();


       	     glBegin(GL_QUADS);/// red ambulance up body alarm
	glColor3f(1.0f, 0.0f, 0.0f);

    glVertex2f(-0.55f, -0.15f);
	glVertex2f(-0.55f, -0.17f);
    glVertex2f(-0.53f, -0.17f);
	glVertex2f(-0.53f, -0.15f);
    glEnd();

    	     glBegin(GL_QUADS);/// white ambulance up body blue right quads
	glColor3f(0.0f, 1.0f, 1.0f);

    glVertex2f(-0.49f, -0.19f);
	glVertex2f(-0.49f, -0.31f);
    glVertex2f(-0.41f, -0.31f);
	glVertex2f(-0.45f, -0.19f);
    glEnd();

        	     glBegin(GL_QUADS);/// white ambulance up body blue left quads
	glColor3f(0.0f, 1.0f, 1.0f);

    glVertex2f(-0.57f, -0.19f);
	glVertex2f(-0.57f, -0.31f);
    glVertex2f(-0.5f, -0.31f);
	glVertex2f(-0.5f, -0.19f);
    glEnd();


        	     glBegin(GL_QUADS);/// ambulance up body red+x
	glColor3f(1.0f, 0.0f, 0.0f);

    glVertex2f(-0.65f, -0.24f);
	glVertex2f(-0.65f, -0.26f);
    glVertex2f(-0.58f, -0.26f);
	glVertex2f(-0.58f, -0.24f);
    glEnd();

           	     glBegin(GL_QUADS);///  ambulance up body red+y
	glColor3f(1.0f, 0.0f, 0.0f);

    glVertex2f(-0.62f, -0.19f);
	glVertex2f(-0.62f, -0.31f);
    glVertex2f(-0.61f, -0.31f);
	glVertex2f(-0.61f, -0.19f);
    glEnd();

    ///Left wheel
    glPushMatrix();
    glTranslatef(-0.6,-0.45,0);
    glRotatef(-wheel_angle,0,0,1);
        wheel();
    glPopMatrix();
    ///Right wheel
    glPushMatrix();
    glTranslatef(-0.45,-0.45,0);
        glRotatef(-wheel_angle,0,0,1);
        wheel();
    glPopMatrix();

}

void policeCar()
{
    ///police car

    	     glBegin(GL_QUADS);/// white ambulance down body
	glColor3f(1.0f, 1.0f, 1.0f);

    glVertex2f(0.37f, -0.77f);
	glVertex2f(0.35f, -0.89f);
    glVertex2f(0.7f, -0.89f);
	glVertex2f(0.69f, -0.77f);
    glEnd();

       	     glBegin(GL_QUADS);/// black ambulance down start line
	glColor3f(0.2f, 0.2f, 0.2f);

    glVertex2f(0.34f, -0.87f);
	glVertex2f(0.34f, -0.89f);
    glVertex2f(0.37f, -0.89f);
	glVertex2f(0.37f, -0.87f);
    glEnd();

           	     glBegin(GL_QUADS);/// black ambulance down end line
	glColor3f(0.2f, 0.2f, 0.2f);

    glVertex2f(0.68f, -0.87f);
	glVertex2f(0.68f, -0.89f);
    glVertex2f(0.72f, -0.89f);
	glVertex2f(0.72f, -0.87f);
    glEnd();



     	     glBegin(GL_QUADS);/// red ambulance middle line
	glColor3f(1.0f, 0.0f, 0.0f);

    glVertex2f(0.366f, -0.79f);
	glVertex2f(0.363f, -0.81f);
    glVertex2f(0.39f, -0.81f);
	glVertex2f(0.39f, -0.79f);
    glEnd();

    	     glBegin(GL_QUADS);/// blue ambulance middle line
	glColor3f(0.0f, 0.0f, 1.0f);

    glVertex2f(0.4f, -0.79f);
	glVertex2f(0.4f, -0.81f);
    glVertex2f(0.66f, -0.81f);
	glVertex2f(0.66f, -0.79f);
    glEnd();

        	     glBegin(GL_QUADS);/// red ambulance middle line
	glColor3f(1.0f, 0.0f, 0.0f);

    glVertex2f(0.67f, -0.79f);
	glVertex2f(0.67f, -0.81f);
    glVertex2f(0.695f, -0.81f);
	glVertex2f(0.693f, -0.79f);
    glEnd();

        	     glBegin(GL_QUADS);/// white ambulance up body
	glColor3f(1.0f, 1.0f, 1.0f);

    glVertex2f(0.46f, -0.7f);
	glVertex2f(0.41f, -0.77f);
    glVertex2f(0.65f, -0.77f);
	glVertex2f(0.62f, -0.7f);
    glEnd();

            	     glBegin(GL_QUADS);/// akashi ambulance up body
	glColor3f(0.0f, 1.0f, 1.0f);

    glVertex2f(0.465f, -0.715f);
	glVertex2f(0.42f, -0.77f);
    glVertex2f(0.52f, -0.77f);
	glVertex2f(0.52f, -0.715f);
    glEnd();

           	     glBegin(GL_QUADS);/// akashi ambulance up body
	glColor3f(0.0f, 1.0f, 1.0f);

    glVertex2f(0.53f, -0.715f);
	glVertex2f(0.53f, -0.77f);
    glVertex2f(0.64f, -0.77f);
	glVertex2f(0.615f, -0.715f);
    glEnd();



            	     glBegin(GL_QUADS);/// red car upper light
	glColor3f(1.0f, 0.0f, 0.0f);

    glVertex2f(0.475f, -0.68f);
	glVertex2f(0.475f, -0.7f);
    glVertex2f(0.49f, -0.7f);
	glVertex2f(0.49f, -0.68f);
    glEnd();

                	     glBegin(GL_QUADS);/// blue car upper light
	glColor3f(0.0f, 0.0f, 1.0f);

    glVertex2f(0.49f, -0.68f);
	glVertex2f(0.49f, -0.7f);
    glVertex2f(0.505f, -0.7f);
	glVertex2f(0.505f, -0.68f);
    glEnd();

                    	     glBegin(GL_QUADS);/// red car upper light
	glColor3f(1.0f, 0.0f, 0.0f);

    glVertex2f(0.505f, -0.68f);
	glVertex2f(0.505f, -0.7f);
    glVertex2f(0.52f, -0.7f);
	glVertex2f(0.52f, -0.68f);
    glEnd();
    ///left wheel
    glPushMatrix();
    glTranslatef(0.45,-0.9,0);
    glRotatef(wheel_angle,0,0,1);
        wheel();
    glPopMatrix();
    ///right wheel
    glPushMatrix();
    glTranslatef(0.6,-0.9,0);
    glRotatef(wheel_angle,0,0,1);
        wheel();
    glPopMatrix();

}

void display()
{
    SKY_Background();
    river();
    WalkWay();
    road();

   allLampPost();
   if(covidPhase==1)
   {
       human(1,0,1,man1Position,0);
       human(0.5,0.2,0.6, man4Position,0);
   }
   if(covidPhase!=2)
   {
       human(0,1,1,man2Position,0);
       human(1,0.5,0.5,man3Position,0);
   }

    if(covidPhase!=1)
    {
        glPushMatrix();
            glRotatef(180,0,1,0);
            glTranslatef(0.6+ambulance_position,0,0);
            ambulance();
        glPopMatrix();

    }
    if(covidPhase==1)///in only phase 1
    {
        glPushMatrix();
        glTranslatef(-busPosition,-0.45,0);
            bus();
        glPopMatrix();
    }
    if(covidPhase!=2)///in pahse 1 and 2
    {
        car2();

        glPushMatrix();
        glRotatef(180,0,1,0);
        glTranslatef(-busPosition,-0.85,0);
            bus();
        glPopMatrix();
    }

    if(covidPhase==1)///only in phase 1
    {
        car1();

    }

    ///ambulance and police car

    if(covidPhase!=1)
    {
        glPushMatrix();
            glRotatef(0,0,1,0);
            glTranslatef(ambulance_position-0.6,-0.45,0);
            ambulance();
        glPopMatrix();


        glPushMatrix();
            glRotatef(180,0,1,0);
            glTranslatef(-police_car_position,0,0);
            policeCar();
        glPopMatrix();
    }

   if(isRain)
   {
       rainSeason();
   }
   if(isWinter)
   {
       winterSeason();
   }

	glFlush();  //// Render now
}
void handleMouse(int button, int state, int x, int y) {
    if (button == GLUT_LEFT_BUTTON)
    {
        car1speed+=0.001;
        car2speed+=0.001;
        ship_speed+=0.001;
        planeSpeed+=0.001;
        boat_speed+=0.001;
        police_car_speed+=0.001;
        busSpeed+=0.001;
        ambulance_speed+=0.001;
    }
    if (button == GLUT_RIGHT_BUTTON)
    {
        car1speed-=0.001;
        if(car1speed<=0)
        {
            car1speed=0.001;
        }
        car2speed-=0.001;
        if(car2speed<=0)
        {
            car2speed=0.001;
        }
        ship_speed-=0.001;
        if(ship_speed<=0)
        {
            ship_speed=0.001;
        }
        planeSpeed-=0.001;
        if(planeSpeed<=0)
        {
            planeSpeed=0.001;
        }
        boat_speed-=0.001;
        if(boat_speed<=0)
        {
            boat_speed=0.001;
        }
        police_car_speed-=0.001;
        if(police_car_speed<=0)
        {
            police_car_speed=0.001;
        }
        busSpeed-=0.001;
        if(busSpeed<=0)
        {
            busSpeed=0.001;
        }
        ambulance_speed-=0.001;
        if(ambulance_speed<=0)
        {
            ambulance_speed=0.001;
        }
    }
    glutPostRedisplay();
}


void handleKeypress(unsigned char key, int x, int y)
{
    switch (key)
    {
        case 'r':
            if(isRain)
            {
                isRain=false;
            }
            else
            {
                isRain=true;
                isWinter=false;
            }
            break;
        case 'w':
            if(isWinter)
            {
                isWinter=false;
            }
            else
            {
                isWinter=true;
                isRain=false;
            }
            break;
        case 'c':
            if(covidPhase==1)
            {
                covidPhase=2;
            }
            else if(covidPhase==2)
            {
                covidPhase=3;
            }
            else
            {
                covidPhase=1;
            }
            break;
        glutPostRedisplay();
    }
}





int main(int argc, char** argv) {
	glutInit(&argc, argv);                 //// Initialize GLUT
	glutCreateWindow("OpenGL Setup"); //// Create a window with the given title
	glutInitWindowSize(320, 320);   //// Set the window's initial width & height
	glutDisplayFunc(display); //// Register display callback handler for window re-paint
	glutTimerFunc(100, update, 0);
   glutKeyboardFunc(handleKeypress);
   glutMouseFunc(handleMouse);
	glutMainLoop();           //// Enter the event-processing loop
	return 0;
}
