#include<cstdio>
#include <GL/gl.h>
#include <GL/glut.h>
#include<math.h>
#define PI          3.141516


GLfloat ship_position = 0.0f;
GLfloat ship_speed = 0.01f;
float boat_position = 0.0f;
float boat_speed = 0.001f;

float car1position=0;
float car1speed=0.005;

float car2position=0;
float car2speed=0.005;

float rainPosition=1;
float rainSpeed=0.02;

bool isRain=false;

float icePosition=1;
float iceSpeed=0.02;

bool isWinter=false;

int wheel_angle=0;

float busPosition=0.0;
float busSpeed=0.009;

float cloudPosition=0.0;
float cloudSpeed=0.003;

float sunPosition=0.0;
float sunSpeed=0.003;

float man1Position=0.3f;
float man1Speed=0.008;
;
float man2Position=-0.4f;
float man2Speed=0.012;

float man3Position=0.8f;
float man3Speed=0.01;

float man4Position=0.9f;
float man4Speed=0.015;


float ambulance_position=0;
float ambulance_speed=0.01;

float police_car_position=0;
float police_car_speed=0.01;

float planePosition=0;
float planeSpeed=0.025;


int covidPhase=1;
    ///pahse 1 is before covid
    ///phase 2 is during covid
    ///phase 3 is after covid


void update(int value)
{
    planePosition-=planeSpeed;
    if(planePosition<-1.0)
    {
        planePosition=1.0;
    }

    man1Position+=man1Speed;
    if(man1Position>1.0)
    {
        man1Position=-1.0;
    }
    man2Position+=man2Speed;
    if(man2Position>1.0)
    {
        man2Position=-1.0;
    }
    man3Position-=man3Speed;
    if(man1Position<-1.0)
    {
        man3Position=1.0;
    }
    man4Position-=man4Speed;
    if(man4Position<-1.0)
    {
        man4Position=1.0;
    }

    rainPosition-=rainSpeed;
    if(rainPosition<-1.0)
    {
        rainPosition=1;
    }
    icePosition-=iceSpeed;
    if(icePosition<-1.0)
    {
        icePosition=1;
    }
   if(car1position <=-1.0)
       car1position = 1.0f;
   car1position -= car1speed;

   if(car2position <=-1.0)
       car2position = 1.0f;
   car2position -= car2speed;

    if (ship_position>=1)
    {
        ship_position=-1;
    }
    ship_position+=ship_speed;


    boat_position -= boat_speed;
    if(boat_position <-1.0)
        boat_position = 1.0f;

    wheel_angle-=10;
    if(wheel_angle>=360)
    {
        wheel_angle=0;
    }
    busPosition+=busSpeed;
    if(busPosition>1.0)
    {
        busPosition=-1.0;
    }

    cloudPosition+=cloudSpeed;
    if(cloudPosition>1.0)
    {
        cloudPosition=-1.0;
    }

    sunPosition+=sunSpeed;
    if(sunPosition>1.0)
    {
        sunPosition=-1.0;
    }

    if (ambulance_position>=2)
    {
        ambulance_position=-1;
    }
    ambulance_position+=ambulance_speed;

    if (police_car_position>=2)
    {
        police_car_position=-1;
    }
    police_car_position+=police_car_speed;



glutPostRedisplay();
glutTimerFunc(100, update, 0);
}

void circle(float p1, float q1, float r1)
{
    int i;
    int tringle2=40;

    GLfloat tp2 =2.0f * PI  ;

    glBegin (GL_TRIANGLE_FAN);

    glVertex2f (p1,q1);
    for(i= 0;i<=tringle2; i++)
    {
        glVertex2f (
                    p1+(r1*cos(i*tp2/tringle2)),
                    q1+(r1*sin(i*tp2/tringle2))
                    );


    }
    glEnd ();
}

void lamplight()
{
    glPushMatrix();
    glTranslatef(0.06,0.13,0);
    glRotatef(90,0,0,1);
    ///lamp post light circle
        glPushMatrix();
        ///rotating circle along x axis to make it ellipse
        glRotatef(60,1,0,0);
        ///outer circle
        glColor3f(1,1,1);
        circle(0,0,0.08);
        ///inner circle
        glColor3f(1,0,1);
        circle(0,0,0.07);
        glColor3f(1,1,1);
        glBegin(GL_QUADS);
            ///lamp post light 1
            glVertex2f(0.01,0.01);
            glVertex2f(0.04,0.01);
            glVertex2f(0.04,0.04);
            glVertex2f(0.01,0.04);

            ///lamp post light 2
            glVertex2f(-0.01,-0.01);
            glVertex2f(-0.04,-0.01);
            glVertex2f(-0.04,-0.04);
            glVertex2f(-0.01,-0.04);

            ///lamp post light 3
            glVertex2f(0.01,-0.01);
            glVertex2f(0.04,-0.01);
            glVertex2f(0.04,-0.04);
            glVertex2f(0.01,-0.04);

            ///lamp post light 4
            glVertex2f(-0.01,0.01);
            glVertex2f(-0.04,0.01);
            glVertex2f(-0.04,0.04);
            glVertex2f(-0.01,0.04);

        glEnd();
        glPopMatrix();
    glPopMatrix();
}
void lampStand()
{
    glColor3f(0.2,0.2,0.6);
    glBegin(GL_QUADS);
    glVertex2f(-0.01,-0.2);
    glVertex2f(-0.01,0.1);
    glVertex2f(0.01,0.1);
    glVertex2f(0.01,-0.2);
    glEnd();
}
void lampPostRight()
{
    lampStand();
    lamplight();
}
void lampPostLeft()
{
    lampStand();
    glPushMatrix();
    glRotatef(180,0,1,0);
    lamplight();
    glPopMatrix();
}
void lampPost()
{
    glPushMatrix();
    glTranslatef(0.1,0,0);
    lampPostRight();
    glPopMatrix();

    glPushMatrix();
    glTranslatef(-0.1,0,0);
    lampPostLeft();
    glPopMatrix();
}
void allLampPost()
{
    ///middle
    lampPost();
    glPushMatrix();
    glTranslatef(0.7,0,0);
    lampPost();///right
    glPopMatrix();

    glPushMatrix();
    glTranslatef(-0.7,0,0);
    lampPost();///left
    glPopMatrix();
}
void human(float x, float y)
{
    glPushMatrix();
    glTranslatef(x,y,0);
    //human1
    //shirt
	glBegin(GL_QUADS);              // Each set of 4 vertices form a quad
	glColor3f(0.4, 0.1, 0.5); // Red

	glVertex2f(0.0f, -0.13f);    // x, y
	glVertex2f(0.07f, -0.13f);    // x, y

	glVertex2f(0.07f, -0.06f);    // x, y
	glVertex2f(0.0f, -0.06f);    // x, y
	glEnd();

	///left hand
	glBegin(GL_QUADS);
    glColor3f(0.8, 0.8, 0.7f);

    glVertex2f(0.0f,-0.145f);
    glVertex2f(-0.015f,-0.145f);
    glVertex2f(-0.012f,-0.06f);
    glVertex2f(0.0f,-0.06f);
    glEnd();

	///left hand sleave
	glBegin(GL_QUADS);
    glColor3f(0.4, 0.1, 0.5);

    glVertex2f(0.0f,-0.1f);
    glVertex2f(-0.015f,-0.1f);
    glVertex2f(-0.012f,-0.06f);
    glVertex2f(0.0f,-0.06f);
    glEnd();

    ///right hand
	glBegin(GL_QUADS);
    glColor3f(0.8, 0.8, 0.7f);

    glVertex2f(0.07f,-0.145f);
    glVertex2f(0.085f,-0.145f);
    glVertex2f(0.082f,-0.06f);
    glVertex2f(0.07f,-0.06f);
    glEnd();



	///right hand sleave
	glBegin(GL_QUADS);
    glColor3f(0.4, 0.1, 0.5);

    glVertex2f(0.07f,-0.1f);
    glVertex2f(0.085f,-0.1f);
    glVertex2f(0.082f,-0.06f);
    glVertex2f(0.07f,-0.06f);
    glEnd();

	//leg
	glBegin(GL_QUADS);              // Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.0f, 0.6f); // Red

	glVertex2f(0.0f, -0.2f);    // x, y
	glVertex2f(0.02f, -0.2f);    // x, y

	glVertex2f(0.07f, -0.13f);    // x, y
	glVertex2f(0.0f, -0.13f);    // x, y
	glEnd();
	glBegin(GL_QUADS);              // Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.0f, 0.6f); // Red

	glVertex2f(0.05f, -0.2f);    // x, y
	glVertex2f(0.07f, -0.2f);    // x, y

	glVertex2f(0.07f, -0.13f);    // x, y
	glVertex2f(0.03f, -0.16f);    // x, y
	glEnd();
	///shoe
	glBegin(GL_QUADS);              // Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.0f, 0.0f); // Red

	glVertex2f(0.0f, -0.22f);    // x, y
	glVertex2f(0.02f, -0.22f);    // x, y

	glVertex2f(0.02f, -0.2f);    // x, y
	glVertex2f(0.0f, -0.2f);    // x, y
	glEnd();
	glBegin(GL_QUADS);              // Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.0f, 0.0f); // Red

	glVertex2f(0.05f, -0.22f);    // x, y
	glVertex2f(0.07f, -0.22f);    // x, y

	glVertex2f(0.07f, -0.2f);    // x, y
	glVertex2f(0.05f, -0.2f);    // x, y
	glEnd();

	///neck
	glBegin(GL_QUADS);              // Each set of 4 vertices form a quad
	glColor3f(1.0f, 1.0f, 1.0f); // Red

	glVertex2f(0.025f, -0.06f);    // x, y
	glVertex2f(0.045f, -0.06f);    // x, y

	glVertex2f(0.045f, -0.04f);    // x, y
	glVertex2f(0.025f, -0.04f);    // x, y
	glEnd();

	///face
	glBegin(GL_QUADS);              // Each set of 4 vertices form a quad
	glColor3f(1.0f, 1.0f, 1.0f); // Red

	glVertex2f(0.01f, -0.04f);    // x, y
	glVertex2f(0.06f, -0.04f);    // x, y

	glVertex2f(0.06f, 0.0f);    // x, y
	glVertex2f(0.01f, 0.0f);    // x, y
	glEnd();



	///mask
	if(covidPhase==3)
    {
        glColor3f(0,0,0);
        glBegin(GL_POLYGON);
            glVertex2f(0.01,-0.04);
            glVertex2f(0.035, -0.05);
            glVertex2f(0.06, -0.04);
            glVertex2f(0.06, -0.017);
            glVertex2f(0.035, -0.007);
            glVertex2f(0.01, -0.017);
        glEnd();
    }


	///hat
	glBegin(GL_QUADS);              // Each set of 4 vertices form a quad
	glColor3f(0.0f, 0.0f, 0.0f); // Red

	glVertex2f(0.01f, 0.0f);    // x, y
	glVertex2f(0.06f, 0.0f);    // x, y

	glVertex2f(0.05f, 0.03f);    // x, y
	glVertex2f(0.02f, 0.03f);    // x, y
	glEnd();
	glPopMatrix();






}

void WalkWay()
{
    //walkingWay


    glBegin(GL_QUADS);              // Each set of 4 vertices form a quad
    glColor3f(0.4f, 0.0f, 0.3f); // Red

    glVertex2f(-1.0f, -0.3f);    // x, y
    glVertex2f(1.0f, -0.3f);    // x, y

    glVertex2f(1.0f, -0.1f);    // x, y
    glVertex2f(-1.0f, -0.1f);    // x, y
    glEnd();
}


void display()
{

    glClearColor(0.0f, 1.0f, 0.0f, 1.0f); //// Set background color to black and opaque
	glClear(GL_COLOR_BUFFER_BIT);         //// Clear the color buffer (background)
	///lamppost function calling
    WalkWay();
    allLampPost();
    human(0.8,0);
    human(-0.8,0);
    human(0.4,0);
    human(-0.4,0);

	glFlush();  //// Render now
}
void handleMouse(int button, int state, int x, int y) {
    if (button == GLUT_LEFT_BUTTON)
    {
        car1speed+=0.001;
        car2speed+=0.001;
        ship_speed+=0.001;
        planeSpeed+=0.001;
        boat_speed+=0.001;
        police_car_speed+=0.001;
        busSpeed+=0.001;
        ambulance_speed+=0.001;
    }
    if (button == GLUT_RIGHT_BUTTON)
    {
        car1speed-=0.001;
        if(car1speed<=0)
        {
            car1speed=0.001;
        }
        car2speed-=0.001;
        if(car2speed<=0)
        {
            car2speed=0.001;
        }
        ship_speed-=0.001;
        if(ship_speed<=0)
        {
            ship_speed=0.001;
        }
        planeSpeed-=0.001;
        if(planeSpeed<=0)
        {
            planeSpeed=0.001;
        }
        boat_speed-=0.001;
        if(boat_speed<=0)
        {
            boat_speed=0.001;
        }
        police_car_speed-=0.001;
        if(police_car_speed<=0)
        {
            police_car_speed=0.001;
        }
        busSpeed-=0.001;
        if(busSpeed<=0)
        {
            busSpeed=0.001;
        }
        ambulance_speed-=0.001;
        if(ambulance_speed<=0)
        {
            ambulance_speed=0.001;
        }
    }
    glutPostRedisplay();
}


void handleKeypress(unsigned char key, int x, int y)
{
    switch (key)
    {
        case 'r':
            if(isRain)
            {
                isRain=false;
            }
            else
            {
                isRain=true;
                isWinter=false;
            }
            break;
        case 'w':
            if(isWinter)
            {
                isWinter=false;
            }
            else
            {
                isWinter=true;
                isRain=false;
            }
            break;
        case 'c':
            if(covidPhase==1)
            {
                covidPhase=2;
            }
            else if(covidPhase==2)
            {
                covidPhase=3;
            }
            else
            {
                covidPhase=1;
            }
            break;
        glutPostRedisplay();
    }
}





int main(int argc, char** argv) {
	glutInit(&argc, argv);                 //// Initialize GLUT
	glutCreateWindow("OpenGL Setup"); //// Create a window with the given title
	glutInitWindowSize(320, 320);   //// Set the window's initial width & height
	glutDisplayFunc(display); //// Register display callback handler for window re-paint
	glutTimerFunc(100, update, 0);
   glutKeyboardFunc(handleKeypress);
   glutMouseFunc(handleMouse);
	glutMainLoop();           //// Enter the event-processing loop
	return 0;
}
